// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: idl/proto/v3/core.proto

package coreproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoreRpc_Ping_FullMethodName              = "/coreproto.CoreRpc/Ping"
	CoreRpc_CreateCollection_FullMethodName  = "/coreproto.CoreRpc/CreateCollection"
	CoreRpc_DropCollection_FullMethodName    = "/coreproto.CoreRpc/DropCollection"
	CoreRpc_CollectionInfof_FullMethodName   = "/coreproto.CoreRpc/CollectionInfof"
	CoreRpc_LoadCollection_FullMethodName    = "/coreproto.CoreRpc/LoadCollection"
	CoreRpc_ReleaseCollection_FullMethodName = "/coreproto.CoreRpc/ReleaseCollection"
	CoreRpc_Insert_FullMethodName            = "/coreproto.CoreRpc/Insert"
	CoreRpc_Update_FullMethodName            = "/coreproto.CoreRpc/Update"
	CoreRpc_Delete_FullMethodName            = "/coreproto.CoreRpc/Delete"
	CoreRpc_VectorSearch_FullMethodName      = "/coreproto.CoreRpc/VectorSearch"
	CoreRpc_FilterSearch_FullMethodName      = "/coreproto.CoreRpc/FilterSearch"
	CoreRpc_HybridSearch_FullMethodName      = "/coreproto.CoreRpc/HybridSearch"
	CoreRpc_CompareDist_FullMethodName       = "/coreproto.CoreRpc/CompareDist"
)

// CoreRpcClient is the client API for CoreRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreRpcClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCollection(ctx context.Context, in *CollectionSpec, opts ...grpc.CallOption) (*CollectionResponse, error)
	DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Response, error)
	CollectionInfof(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionMsg, error)
	LoadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionMsg, error)
	ReleaseCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*ResponseWithMessage, error)
	Insert(ctx context.Context, in *DatasetChange, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *DatasetChange, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DatasetChange, opts ...grpc.CallOption) (*Response, error)
	VectorSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	FilterSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	HybridSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	CompareDist(ctx context.Context, in *CompXyDist, opts ...grpc.CallOption) (*XyDist, error)
}

type coreRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreRpcClient(cc grpc.ClientConnInterface) CoreRpcClient {
	return &coreRpcClient{cc}
}

func (c *coreRpcClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CoreRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) CreateCollection(ctx context.Context, in *CollectionSpec, opts ...grpc.CallOption) (*CollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, CoreRpc_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoreRpc_DropCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) CollectionInfof(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionMsg)
	err := c.cc.Invoke(ctx, CoreRpc_CollectionInfof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) LoadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionMsg)
	err := c.cc.Invoke(ctx, CoreRpc_LoadCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) ReleaseCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*ResponseWithMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseWithMessage)
	err := c.cc.Invoke(ctx, CoreRpc_ReleaseCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) Insert(ctx context.Context, in *DatasetChange, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoreRpc_Insert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) Update(ctx context.Context, in *DatasetChange, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoreRpc_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) Delete(ctx context.Context, in *DatasetChange, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoreRpc_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) VectorSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, CoreRpc_VectorSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) FilterSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, CoreRpc_FilterSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) HybridSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, CoreRpc_HybridSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRpcClient) CompareDist(ctx context.Context, in *CompXyDist, opts ...grpc.CallOption) (*XyDist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XyDist)
	err := c.cc.Invoke(ctx, CoreRpc_CompareDist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreRpcServer is the server API for CoreRpc service.
// All implementations should embed UnimplementedCoreRpcServer
// for forward compatibility.
type CoreRpcServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateCollection(context.Context, *CollectionSpec) (*CollectionResponse, error)
	DropCollection(context.Context, *CollectionName) (*Response, error)
	CollectionInfof(context.Context, *CollectionName) (*CollectionMsg, error)
	LoadCollection(context.Context, *CollectionName) (*CollectionMsg, error)
	ReleaseCollection(context.Context, *CollectionName) (*ResponseWithMessage, error)
	Insert(context.Context, *DatasetChange) (*Response, error)
	Update(context.Context, *DatasetChange) (*Response, error)
	Delete(context.Context, *DatasetChange) (*Response, error)
	VectorSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	FilterSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	HybridSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	CompareDist(context.Context, *CompXyDist) (*XyDist, error)
}

// UnimplementedCoreRpcServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoreRpcServer struct{}

func (UnimplementedCoreRpcServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCoreRpcServer) CreateCollection(context.Context, *CollectionSpec) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedCoreRpcServer) DropCollection(context.Context, *CollectionName) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedCoreRpcServer) CollectionInfof(context.Context, *CollectionName) (*CollectionMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionInfof not implemented")
}
func (UnimplementedCoreRpcServer) LoadCollection(context.Context, *CollectionName) (*CollectionMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (UnimplementedCoreRpcServer) ReleaseCollection(context.Context, *CollectionName) (*ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (UnimplementedCoreRpcServer) Insert(context.Context, *DatasetChange) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedCoreRpcServer) Update(context.Context, *DatasetChange) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCoreRpcServer) Delete(context.Context, *DatasetChange) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCoreRpcServer) VectorSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorSearch not implemented")
}
func (UnimplementedCoreRpcServer) FilterSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSearch not implemented")
}
func (UnimplementedCoreRpcServer) HybridSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (UnimplementedCoreRpcServer) CompareDist(context.Context, *CompXyDist) (*XyDist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareDist not implemented")
}
func (UnimplementedCoreRpcServer) testEmbeddedByValue() {}

// UnsafeCoreRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreRpcServer will
// result in compilation errors.
type UnsafeCoreRpcServer interface {
	mustEmbedUnimplementedCoreRpcServer()
}

func RegisterCoreRpcServer(s grpc.ServiceRegistrar, srv CoreRpcServer) {
	// If the following call pancis, it indicates UnimplementedCoreRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoreRpc_ServiceDesc, srv)
}

func _CoreRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).CreateCollection(ctx, req.(*CollectionSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).DropCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_CollectionInfof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).CollectionInfof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_CollectionInfof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).CollectionInfof(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_LoadCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).LoadCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_ReleaseCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).ReleaseCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).Insert(ctx, req.(*DatasetChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).Update(ctx, req.(*DatasetChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).Delete(ctx, req.(*DatasetChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_VectorSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).VectorSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_VectorSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).VectorSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_FilterSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).FilterSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_FilterSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).FilterSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_HybridSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).HybridSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRpc_CompareDist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompXyDist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRpcServer).CompareDist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreRpc_CompareDist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRpcServer).CompareDist(ctx, req.(*CompXyDist))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreRpc_ServiceDesc is the grpc.ServiceDesc for CoreRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreproto.CoreRpc",
	HandlerType: (*CoreRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CoreRpc_Ping_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _CoreRpc_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _CoreRpc_DropCollection_Handler,
		},
		{
			MethodName: "CollectionInfof",
			Handler:    _CoreRpc_CollectionInfof_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _CoreRpc_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _CoreRpc_ReleaseCollection_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _CoreRpc_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CoreRpc_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CoreRpc_Delete_Handler,
		},
		{
			MethodName: "VectorSearch",
			Handler:    _CoreRpc_VectorSearch_Handler,
		},
		{
			MethodName: "FilterSearch",
			Handler:    _CoreRpc_FilterSearch_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _CoreRpc_HybridSearch_Handler,
		},
		{
			MethodName: "CompareDist",
			Handler:    _CoreRpc_CompareDist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/proto/v3/core.proto",
}
