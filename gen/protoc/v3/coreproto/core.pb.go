// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.0
// source: idl/proto/v3/core.proto

package coreproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchAlgorithm int32

const (
	SearchAlgorithm_Simple    SearchAlgorithm = 0
	SearchAlgorithm_Heuristic SearchAlgorithm = 1
)

// Enum value maps for SearchAlgorithm.
var (
	SearchAlgorithm_name = map[int32]string{
		0: "Simple",
		1: "Heuristic",
	}
	SearchAlgorithm_value = map[string]int32{
		"Simple":    0,
		"Heuristic": 1,
	}
)

func (x SearchAlgorithm) Enum() *SearchAlgorithm {
	p := new(SearchAlgorithm)
	*p = x
	return p
}

func (x SearchAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_proto_v3_core_proto_enumTypes[0].Descriptor()
}

func (SearchAlgorithm) Type() protoreflect.EnumType {
	return &file_idl_proto_v3_core_proto_enumTypes[0]
}

func (x SearchAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchAlgorithm.Descriptor instead.
func (SearchAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{0}
}

type Distance int32

const (
	Distance_Cosine    Distance = 0
	Distance_Euclidean Distance = 1
)

// Enum value maps for Distance.
var (
	Distance_name = map[int32]string{
		0: "Cosine",
		1: "Euclidean",
	}
	Distance_value = map[string]int32{
		"Cosine":    0,
		"Euclidean": 1,
	}
)

func (x Distance) Enum() *Distance {
	p := new(Distance)
	*p = x
	return p
}

func (x Distance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Distance) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_proto_v3_core_proto_enumTypes[1].Descriptor()
}

func (Distance) Type() protoreflect.EnumType {
	return &file_idl_proto_v3_core_proto_enumTypes[1]
}

func (x Distance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Distance.Descriptor instead.
func (Distance) EnumDescriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{1}
}

type Quantization int32

const (
	Quantization_None Quantization = 0
	Quantization_F16  Quantization = 1
	Quantization_F8   Quantization = 2
	Quantization_BF16 Quantization = 3
	Quantization_PQ   Quantization = 4
	Quantization_BQ   Quantization = 5
)

// Enum value maps for Quantization.
var (
	Quantization_name = map[int32]string{
		0: "None",
		1: "F16",
		2: "F8",
		3: "BF16",
		4: "PQ",
		5: "BQ",
	}
	Quantization_value = map[string]int32{
		"None": 0,
		"F16":  1,
		"F8":   2,
		"BF16": 3,
		"PQ":   4,
		"BQ":   5,
	}
)

func (x Quantization) Enum() *Quantization {
	p := new(Quantization)
	*p = x
	return p
}

func (x Quantization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quantization) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_proto_v3_core_proto_enumTypes[2].Descriptor()
}

func (Quantization) Type() protoreflect.EnumType {
	return &file_idl_proto_v3_core_proto_enumTypes[2]
}

func (x Quantization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quantization.Descriptor instead.
func (Quantization) EnumDescriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{2}
}

type ErrorCode int32

const (
	ErrorCode_UNDEFINED                     ErrorCode = 0 // check error message
	ErrorCode_RPC_ERROR                     ErrorCode = 1
	ErrorCode_COMMUNICATION_SHARD_RPC_ERROR ErrorCode = 2
	ErrorCode_COMMUNICATION_SHARD_ERROR     ErrorCode = 3
	ErrorCode_MARSHAL_ERROR                 ErrorCode = 4
	ErrorCode_INTERNAL_FUNC_ERROR           ErrorCode = 5
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "UNDEFINED",
		1: "RPC_ERROR",
		2: "COMMUNICATION_SHARD_RPC_ERROR",
		3: "COMMUNICATION_SHARD_ERROR",
		4: "MARSHAL_ERROR",
		5: "INTERNAL_FUNC_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"UNDEFINED":                     0,
		"RPC_ERROR":                     1,
		"COMMUNICATION_SHARD_RPC_ERROR": 2,
		"COMMUNICATION_SHARD_ERROR":     3,
		"MARSHAL_ERROR":                 4,
		"INTERNAL_FUNC_ERROR":           5,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_proto_v3_core_proto_enumTypes[3].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_idl_proto_v3_core_proto_enumTypes[3]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{3}
}

type IndexChangeTypes int32

const (
	IndexChangeTypes_INSERT IndexChangeTypes = 0
	IndexChangeTypes_UPDATE IndexChangeTypes = 1
	IndexChangeTypes_DELETE IndexChangeTypes = 2
)

// Enum value maps for IndexChangeTypes.
var (
	IndexChangeTypes_name = map[int32]string{
		0: "INSERT",
		1: "UPDATE",
		2: "DELETE",
	}
	IndexChangeTypes_value = map[string]int32{
		"INSERT": 0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x IndexChangeTypes) Enum() *IndexChangeTypes {
	p := new(IndexChangeTypes)
	*p = x
	return p
}

func (x IndexChangeTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexChangeTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_proto_v3_core_proto_enumTypes[4].Descriptor()
}

func (IndexChangeTypes) Type() protoreflect.EnumType {
	return &file_idl_proto_v3_core_proto_enumTypes[4]
}

func (x IndexChangeTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexChangeTypes.Descriptor instead.
func (IndexChangeTypes) EnumDescriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{4}
}

type CompXyDist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectorX []float32 `protobuf:"fixed32,1,rep,packed,name=vector_x,json=vectorX,proto3" json:"vector_x,omitempty"`
	VectorY []float32 `protobuf:"fixed32,2,rep,packed,name=vector_y,json=vectorY,proto3" json:"vector_y,omitempty"`
	Dist    Distance  `protobuf:"varint,3,opt,name=dist,proto3,enum=coreproto.Distance" json:"dist,omitempty"`
}

func (x *CompXyDist) Reset() {
	*x = CompXyDist{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompXyDist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompXyDist) ProtoMessage() {}

func (x *CompXyDist) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompXyDist.ProtoReflect.Descriptor instead.
func (*CompXyDist) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{0}
}

func (x *CompXyDist) GetVectorX() []float32 {
	if x != nil {
		return x.VectorX
	}
	return nil
}

func (x *CompXyDist) GetVectorY() []float32 {
	if x != nil {
		return x.VectorY
	}
	return nil
}

func (x *CompXyDist) GetDist() Distance {
	if x != nil {
		return x.Dist
	}
	return Distance_Cosine
}

type XyDist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *XyDist) Reset() {
	*x = XyDist{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XyDist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XyDist) ProtoMessage() {}

func (x *XyDist) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XyDist.ProtoReflect.Descriptor instead.
func (*XyDist) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{1}
}

func (x *XyDist) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type DatasetChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CollectionName   string           `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Vector           []float32        `protobuf:"fixed32,3,rep,packed,name=vector,proto3" json:"vector,omitempty"`
	Metadata         *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	IndexChangeTypes IndexChangeTypes `protobuf:"varint,5,opt,name=index_change_types,json=indexChangeTypes,proto3,enum=coreproto.IndexChangeTypes" json:"index_change_types,omitempty"`
}

func (x *DatasetChange) Reset() {
	*x = DatasetChange{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetChange) ProtoMessage() {}

func (x *DatasetChange) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetChange.ProtoReflect.Descriptor instead.
func (*DatasetChange) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{2}
}

func (x *DatasetChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DatasetChange) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DatasetChange) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *DatasetChange) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DatasetChange) GetIndexChangeTypes() IndexChangeTypes {
	if x != nil {
		return x.IndexChangeTypes
	}
	return IndexChangeTypes_INSERT
}

type CollectionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	WithSize       bool   `protobuf:"varint,2,opt,name=with_size,json=withSize,proto3" json:"with_size,omitempty"`
}

func (x *CollectionName) Reset() {
	*x = CollectionName{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionName) ProtoMessage() {}

func (x *CollectionName) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionName.ProtoReflect.Descriptor instead.
func (*CollectionName) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionName) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionName) GetWithSize() bool {
	if x != nil {
		return x.WithSize
	}
	return false
}

type CollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Spec   *CollectionSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Error  *Error          `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CollectionResponse) Reset() {
	*x = CollectionResponse{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionResponse) ProtoMessage() {}

func (x *CollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionResponse.ProtoReflect.Descriptor instead.
func (*CollectionResponse) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{4}
}

func (x *CollectionResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CollectionResponse) GetSpec() *CollectionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CollectionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CollectionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string       `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	CollectionConfig  *HnswConfig  `protobuf:"bytes,2,opt,name=collection_config,json=collectionConfig,proto3" json:"collection_config,omitempty"`
	VectorDimension   uint32       `protobuf:"varint,3,opt,name=vector_dimension,json=vectorDimension,proto3" json:"vector_dimension,omitempty"`
	Distance          Distance     `protobuf:"varint,4,opt,name=distance,proto3,enum=coreproto.Distance" json:"distance,omitempty"`
	CompressionHelper Quantization `protobuf:"varint,5,opt,name=compression_helper,json=compressionHelper,proto3,enum=coreproto.Quantization" json:"compression_helper,omitempty"`
}

func (x *CollectionSpec) Reset() {
	*x = CollectionSpec{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionSpec) ProtoMessage() {}

func (x *CollectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionSpec.ProtoReflect.Descriptor instead.
func (*CollectionSpec) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{5}
}

func (x *CollectionSpec) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionSpec) GetCollectionConfig() *HnswConfig {
	if x != nil {
		return x.CollectionConfig
	}
	return nil
}

func (x *CollectionSpec) GetVectorDimension() uint32 {
	if x != nil {
		return x.VectorDimension
	}
	return 0
}

func (x *CollectionSpec) GetDistance() Distance {
	if x != nil {
		return x.Distance
	}
	return Distance_Cosine
}

func (x *CollectionSpec) GetCompressionHelper() Quantization {
	if x != nil {
		return x.CompressionHelper
	}
	return Quantization_None
}

type HnswConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchAlgorithm           SearchAlgorithm `protobuf:"varint,1,opt,name=search_algorithm,json=searchAlgorithm,proto3,enum=coreproto.SearchAlgorithm" json:"search_algorithm,omitempty"`
	LevelMultiplier           float32         `protobuf:"fixed32,2,opt,name=level_multiplier,json=levelMultiplier,proto3" json:"level_multiplier,omitempty"`
	Ef                        int32           `protobuf:"varint,3,opt,name=ef,proto3" json:"ef,omitempty"`
	EfConstruction            int32           `protobuf:"varint,4,opt,name=ef_construction,json=efConstruction,proto3" json:"ef_construction,omitempty"`
	M                         int32           `protobuf:"varint,5,opt,name=m,proto3" json:"m,omitempty"`
	MMax                      int32           `protobuf:"varint,6,opt,name=m_max,json=mMax,proto3" json:"m_max,omitempty"`
	MMax0                     int32           `protobuf:"varint,7,opt,name=m_max0,json=mMax0,proto3" json:"m_max0,omitempty"`
	HeuristicExtendCandidates bool            `protobuf:"varint,8,opt,name=heuristic_extend_candidates,json=heuristicExtendCandidates,proto3" json:"heuristic_extend_candidates,omitempty"`
	HeuristicKeepPruned       bool            `protobuf:"varint,9,opt,name=heuristic_keep_pruned,json=heuristicKeepPruned,proto3" json:"heuristic_keep_pruned,omitempty"`
}

func (x *HnswConfig) Reset() {
	*x = HnswConfig{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswConfig) ProtoMessage() {}

func (x *HnswConfig) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswConfig.ProtoReflect.Descriptor instead.
func (*HnswConfig) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{6}
}

func (x *HnswConfig) GetSearchAlgorithm() SearchAlgorithm {
	if x != nil {
		return x.SearchAlgorithm
	}
	return SearchAlgorithm_Simple
}

func (x *HnswConfig) GetLevelMultiplier() float32 {
	if x != nil {
		return x.LevelMultiplier
	}
	return 0
}

func (x *HnswConfig) GetEf() int32 {
	if x != nil {
		return x.Ef
	}
	return 0
}

func (x *HnswConfig) GetEfConstruction() int32 {
	if x != nil {
		return x.EfConstruction
	}
	return 0
}

func (x *HnswConfig) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *HnswConfig) GetMMax() int32 {
	if x != nil {
		return x.MMax
	}
	return 0
}

func (x *HnswConfig) GetMMax0() int32 {
	if x != nil {
		return x.MMax0
	}
	return 0
}

func (x *HnswConfig) GetHeuristicExtendCandidates() bool {
	if x != nil {
		return x.HeuristicExtendCandidates
	}
	return false
}

func (x *HnswConfig) GetHeuristicKeepPruned() bool {
	if x != nil {
		return x.HeuristicKeepPruned
	}
	return false
}

type ResponseWithMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error   *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResponseWithMessage) Reset() {
	*x = ResponseWithMessage{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseWithMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWithMessage) ProtoMessage() {}

func (x *ResponseWithMessage) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWithMessage.ProtoReflect.Descriptor instead.
func (*ResponseWithMessage) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseWithMessage) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ResponseWithMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseWithMessage) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{8}
}

func (x *Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Response) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string    `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode    ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=coreproto.ErrorCode" json:"error_code,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{9}
}

func (x *Error) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Error) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_UNDEFINED
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Vector            []float32         `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`
	TopK              uint64            `protobuf:"varint,3,opt,name=topK,proto3" json:"topK,omitempty"`
	MinScoreThreshold float32           `protobuf:"fixed32,4,opt,name=min_score_threshold,json=minScoreThreshold,proto3" json:"min_score_threshold,omitempty"`
	Filter            map[string]string `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WithLatency       bool              `protobuf:"varint,6,opt,name=with_latency,json=withLatency,proto3" json:"with_latency,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{10}
}

func (x *SearchRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchRequest) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *SearchRequest) GetTopK() uint64 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchRequest) GetMinScoreThreshold() float32 {
	if x != nil {
		return x.MinScoreThreshold
	}
	return 0
}

func (x *SearchRequest) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchRequest) GetWithLatency() bool {
	if x != nil {
		return x.WithLatency
	}
	return false
}

type Candidates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *structpb.Struct `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Score    float32          `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Candidates) Reset() {
	*x = Candidates{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Candidates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candidates) ProtoMessage() {}

func (x *Candidates) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candidates.ProtoReflect.Descriptor instead.
func (*Candidates) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{11}
}

func (x *Candidates) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Candidates) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Candidates) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     bool          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error      *Error        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Candidates []*Candidates `protobuf:"bytes,3,rep,name=candidates,proto3" json:"candidates,omitempty"`
	Latency    string        `protobuf:"bytes,4,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{12}
}

func (x *SearchResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *SearchResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchResponse) GetCandidates() []*Candidates {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *SearchResponse) GetLatency() string {
	if x != nil {
		return x.Latency
	}
	return ""
}

type CollectionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   *CollectionInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Error  *Error          `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CollectionMsg) Reset() {
	*x = CollectionMsg{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionMsg) ProtoMessage() {}

func (x *CollectionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionMsg.ProtoReflect.Descriptor instead.
func (*CollectionMsg) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{13}
}

func (x *CollectionMsg) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CollectionMsg) GetInfo() *CollectionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CollectionMsg) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName    string       `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	CollectionConfig  *HnswConfig  `protobuf:"bytes,2,opt,name=collection_config,json=collectionConfig,proto3" json:"collection_config,omitempty"`
	VectorDimension   uint32       `protobuf:"varint,3,opt,name=vector_dimension,json=vectorDimension,proto3" json:"vector_dimension,omitempty"`
	Distance          Distance     `protobuf:"varint,4,opt,name=distance,proto3,enum=coreproto.Distance" json:"distance,omitempty"`
	CompressionHelper Quantization `protobuf:"varint,5,opt,name=compression_helper,json=compressionHelper,proto3,enum=coreproto.Quantization" json:"compression_helper,omitempty"`
	CollectionSize    string       `protobuf:"bytes,6,opt,name=collection_size,json=collectionSize,proto3" json:"collection_size,omitempty"`
	CollectionLength  uint64       `protobuf:"varint,7,opt,name=collection_length,json=collectionLength,proto3" json:"collection_length,omitempty"`
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	mi := &file_idl_proto_v3_core_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_idl_proto_v3_core_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_idl_proto_v3_core_proto_rawDescGZIP(), []int{14}
}

func (x *CollectionInfo) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionInfo) GetCollectionConfig() *HnswConfig {
	if x != nil {
		return x.CollectionConfig
	}
	return nil
}

func (x *CollectionInfo) GetVectorDimension() uint32 {
	if x != nil {
		return x.VectorDimension
	}
	return 0
}

func (x *CollectionInfo) GetDistance() Distance {
	if x != nil {
		return x.Distance
	}
	return Distance_Cosine
}

func (x *CollectionInfo) GetCompressionHelper() Quantization {
	if x != nil {
		return x.CompressionHelper
	}
	return Quantization_None
}

func (x *CollectionInfo) GetCollectionSize() string {
	if x != nil {
		return x.CollectionSize
	}
	return ""
}

func (x *CollectionInfo) GetCollectionLength() uint64 {
	if x != nil {
		return x.CollectionLength
	}
	return 0
}

var File_idl_proto_v3_core_proto protoreflect.FileDescriptor

var file_idl_proto_v3_core_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x64, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6b, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x58, 0x79, 0x44, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x58, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x59, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x06,
	0x58, 0x79, 0x44, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xe0, 0x01, 0x0a,
	0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x56, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77,
	0x69, 0x74, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa1, 0x02,
	0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x45, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x66, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x4d, 0x61, 0x78, 0x30, 0x12, 0x3e, 0x0a, 0x1b, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x65, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4b,
	0x65, 0x65, 0x70, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x6f, 0x70, 0x4b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x7e, 0x0a, 0x0d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf7, 0x02, 0x0a, 0x0e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6e, 0x73,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2a, 0x2c, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x10,
	0x01, 0x2a, 0x25, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x75, 0x63,
	0x6c, 0x69, 0x64, 0x65, 0x61, 0x6e, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x31, 0x36, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x46,
	0x38, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x46, 0x31, 0x36, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x50, 0x51, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x51, 0x10, 0x05, 0x2a, 0x97, 0x01,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x50,
	0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x44,
	0x5f, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0x36, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32,
	0xfd, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x70, 0x63, 0x12, 0x38, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x66, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x13, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x58, 0x79, 0x44, 0x69, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x79, 0x44, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_proto_v3_core_proto_rawDescOnce sync.Once
	file_idl_proto_v3_core_proto_rawDescData = file_idl_proto_v3_core_proto_rawDesc
)

func file_idl_proto_v3_core_proto_rawDescGZIP() []byte {
	file_idl_proto_v3_core_proto_rawDescOnce.Do(func() {
		file_idl_proto_v3_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_proto_v3_core_proto_rawDescData)
	})
	return file_idl_proto_v3_core_proto_rawDescData
}

var file_idl_proto_v3_core_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_idl_proto_v3_core_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_idl_proto_v3_core_proto_goTypes = []any{
	(SearchAlgorithm)(0),        // 0: coreproto.SearchAlgorithm
	(Distance)(0),               // 1: coreproto.Distance
	(Quantization)(0),           // 2: coreproto.Quantization
	(ErrorCode)(0),              // 3: coreproto.ErrorCode
	(IndexChangeTypes)(0),       // 4: coreproto.IndexChangeTypes
	(*CompXyDist)(nil),          // 5: coreproto.CompXyDist
	(*XyDist)(nil),              // 6: coreproto.XyDist
	(*DatasetChange)(nil),       // 7: coreproto.DatasetChange
	(*CollectionName)(nil),      // 8: coreproto.CollectionName
	(*CollectionResponse)(nil),  // 9: coreproto.CollectionResponse
	(*CollectionSpec)(nil),      // 10: coreproto.CollectionSpec
	(*HnswConfig)(nil),          // 11: coreproto.HnswConfig
	(*ResponseWithMessage)(nil), // 12: coreproto.ResponseWithMessage
	(*Response)(nil),            // 13: coreproto.Response
	(*Error)(nil),               // 14: coreproto.Error
	(*SearchRequest)(nil),       // 15: coreproto.SearchRequest
	(*Candidates)(nil),          // 16: coreproto.Candidates
	(*SearchResponse)(nil),      // 17: coreproto.SearchResponse
	(*CollectionMsg)(nil),       // 18: coreproto.CollectionMsg
	(*CollectionInfo)(nil),      // 19: coreproto.CollectionInfo
	nil,                         // 20: coreproto.SearchRequest.FilterEntry
	(*structpb.Struct)(nil),     // 21: google.protobuf.Struct
	(*emptypb.Empty)(nil),       // 22: google.protobuf.Empty
}
var file_idl_proto_v3_core_proto_depIdxs = []int32{
	1,  // 0: coreproto.CompXyDist.dist:type_name -> coreproto.Distance
	21, // 1: coreproto.DatasetChange.metadata:type_name -> google.protobuf.Struct
	4,  // 2: coreproto.DatasetChange.index_change_types:type_name -> coreproto.IndexChangeTypes
	10, // 3: coreproto.CollectionResponse.spec:type_name -> coreproto.CollectionSpec
	14, // 4: coreproto.CollectionResponse.error:type_name -> coreproto.Error
	11, // 5: coreproto.CollectionSpec.collection_config:type_name -> coreproto.HnswConfig
	1,  // 6: coreproto.CollectionSpec.distance:type_name -> coreproto.Distance
	2,  // 7: coreproto.CollectionSpec.compression_helper:type_name -> coreproto.Quantization
	0,  // 8: coreproto.HnswConfig.search_algorithm:type_name -> coreproto.SearchAlgorithm
	14, // 9: coreproto.ResponseWithMessage.error:type_name -> coreproto.Error
	14, // 10: coreproto.Response.error:type_name -> coreproto.Error
	3,  // 11: coreproto.Error.error_code:type_name -> coreproto.ErrorCode
	20, // 12: coreproto.SearchRequest.filter:type_name -> coreproto.SearchRequest.FilterEntry
	21, // 13: coreproto.Candidates.metadata:type_name -> google.protobuf.Struct
	14, // 14: coreproto.SearchResponse.error:type_name -> coreproto.Error
	16, // 15: coreproto.SearchResponse.candidates:type_name -> coreproto.Candidates
	19, // 16: coreproto.CollectionMsg.info:type_name -> coreproto.CollectionInfo
	14, // 17: coreproto.CollectionMsg.error:type_name -> coreproto.Error
	11, // 18: coreproto.CollectionInfo.collection_config:type_name -> coreproto.HnswConfig
	1,  // 19: coreproto.CollectionInfo.distance:type_name -> coreproto.Distance
	2,  // 20: coreproto.CollectionInfo.compression_helper:type_name -> coreproto.Quantization
	22, // 21: coreproto.CoreRpc.Ping:input_type -> google.protobuf.Empty
	10, // 22: coreproto.CoreRpc.CreateCollection:input_type -> coreproto.CollectionSpec
	8,  // 23: coreproto.CoreRpc.DropCollection:input_type -> coreproto.CollectionName
	8,  // 24: coreproto.CoreRpc.CollectionInfof:input_type -> coreproto.CollectionName
	8,  // 25: coreproto.CoreRpc.LoadCollection:input_type -> coreproto.CollectionName
	8,  // 26: coreproto.CoreRpc.ReleaseCollection:input_type -> coreproto.CollectionName
	7,  // 27: coreproto.CoreRpc.Insert:input_type -> coreproto.DatasetChange
	7,  // 28: coreproto.CoreRpc.Update:input_type -> coreproto.DatasetChange
	7,  // 29: coreproto.CoreRpc.Delete:input_type -> coreproto.DatasetChange
	15, // 30: coreproto.CoreRpc.VectorSearch:input_type -> coreproto.SearchRequest
	15, // 31: coreproto.CoreRpc.FilterSearch:input_type -> coreproto.SearchRequest
	15, // 32: coreproto.CoreRpc.HybridSearch:input_type -> coreproto.SearchRequest
	5,  // 33: coreproto.CoreRpc.CompareDist:input_type -> coreproto.CompXyDist
	22, // 34: coreproto.CoreRpc.Ping:output_type -> google.protobuf.Empty
	9,  // 35: coreproto.CoreRpc.CreateCollection:output_type -> coreproto.CollectionResponse
	13, // 36: coreproto.CoreRpc.DropCollection:output_type -> coreproto.Response
	18, // 37: coreproto.CoreRpc.CollectionInfof:output_type -> coreproto.CollectionMsg
	18, // 38: coreproto.CoreRpc.LoadCollection:output_type -> coreproto.CollectionMsg
	12, // 39: coreproto.CoreRpc.ReleaseCollection:output_type -> coreproto.ResponseWithMessage
	13, // 40: coreproto.CoreRpc.Insert:output_type -> coreproto.Response
	13, // 41: coreproto.CoreRpc.Update:output_type -> coreproto.Response
	13, // 42: coreproto.CoreRpc.Delete:output_type -> coreproto.Response
	17, // 43: coreproto.CoreRpc.VectorSearch:output_type -> coreproto.SearchResponse
	17, // 44: coreproto.CoreRpc.FilterSearch:output_type -> coreproto.SearchResponse
	17, // 45: coreproto.CoreRpc.HybridSearch:output_type -> coreproto.SearchResponse
	6,  // 46: coreproto.CoreRpc.CompareDist:output_type -> coreproto.XyDist
	34, // [34:47] is the sub-list for method output_type
	21, // [21:34] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_idl_proto_v3_core_proto_init() }
func file_idl_proto_v3_core_proto_init() {
	if File_idl_proto_v3_core_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_proto_v3_core_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_proto_v3_core_proto_goTypes,
		DependencyIndexes: file_idl_proto_v3_core_proto_depIdxs,
		EnumInfos:         file_idl_proto_v3_core_proto_enumTypes,
		MessageInfos:      file_idl_proto_v3_core_proto_msgTypes,
	}.Build()
	File_idl_proto_v3_core_proto = out.File
	file_idl_proto_v3_core_proto_rawDesc = nil
	file_idl_proto_v3_core_proto_goTypes = nil
	file_idl_proto_v3_core_proto_depIdxs = nil
}
