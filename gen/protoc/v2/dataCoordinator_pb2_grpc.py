# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dataCoordinator_pb2 as dataCoordinator__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dataCoordinator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatasetCoordinatorStub(object):
    """dataset coordinator is managing kv data or vector data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/Ping',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Insert = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/Insert',
                request_serializer=dataCoordinator__pb2.ModifyDataset.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/Update',
                request_serializer=dataCoordinator__pb2.ModifyDataset.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/Delete',
                request_serializer=dataCoordinator__pb2.DeleteDataset.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.VectorSearch = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/VectorSearch',
                request_serializer=dataCoordinator__pb2.SearchReq.SerializeToString,
                response_deserializer=dataCoordinator__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.FilterSearch = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/FilterSearch',
                request_serializer=dataCoordinator__pb2.SearchReq.SerializeToString,
                response_deserializer=dataCoordinator__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.HybridSearch = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/HybridSearch',
                request_serializer=dataCoordinator__pb2.SearchReq.SerializeToString,
                response_deserializer=dataCoordinator__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.BatchInsert = channel.stream_stream(
                '/dataCoordinatorV2.DatasetCoordinator/BatchInsert',
                request_serializer=dataCoordinator__pb2.StreamModifyDataset.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.BatchUpdate = channel.stream_stream(
                '/dataCoordinatorV2.DatasetCoordinator/BatchUpdate',
                request_serializer=dataCoordinator__pb2.StreamModifyDataset.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.BatchDelete = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/BatchDelete',
                request_serializer=dataCoordinator__pb2.BatchDeleteIds.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.PerformanceCompaction = channel.unary_unary(
                '/dataCoordinatorV2.DatasetCoordinator/PerformanceCompaction',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dataCoordinator__pb2.Response.FromString,
                _registered_method=True)


class DatasetCoordinatorServicer(object):
    """dataset coordinator is managing kv data or vector data
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """vector rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorSearch(self, request, context):
        """vectorsearch <- only search vector query
        filtersearch <- not using vector, only use filter
        hybrid filter + vector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HybridSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchInsert(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpdate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformanceCompaction(self, request, context):
        """It may conflict with multiple tasks, so we recommend avoiding it during busy times and running it during idle times.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatasetCoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=dataCoordinator__pb2.ModifyDataset.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=dataCoordinator__pb2.ModifyDataset.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=dataCoordinator__pb2.DeleteDataset.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
            'VectorSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorSearch,
                    request_deserializer=dataCoordinator__pb2.SearchReq.FromString,
                    response_serializer=dataCoordinator__pb2.SearchResponse.SerializeToString,
            ),
            'FilterSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterSearch,
                    request_deserializer=dataCoordinator__pb2.SearchReq.FromString,
                    response_serializer=dataCoordinator__pb2.SearchResponse.SerializeToString,
            ),
            'HybridSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.HybridSearch,
                    request_deserializer=dataCoordinator__pb2.SearchReq.FromString,
                    response_serializer=dataCoordinator__pb2.SearchResponse.SerializeToString,
            ),
            'BatchInsert': grpc.stream_stream_rpc_method_handler(
                    servicer.BatchInsert,
                    request_deserializer=dataCoordinator__pb2.StreamModifyDataset.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
            'BatchUpdate': grpc.stream_stream_rpc_method_handler(
                    servicer.BatchUpdate,
                    request_deserializer=dataCoordinator__pb2.StreamModifyDataset.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
            'BatchDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchDelete,
                    request_deserializer=dataCoordinator__pb2.BatchDeleteIds.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
            'PerformanceCompaction': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformanceCompaction,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dataCoordinator__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataCoordinatorV2.DatasetCoordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dataCoordinatorV2.DatasetCoordinator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatasetCoordinator(object):
    """dataset coordinator is managing kv data or vector data
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/Ping',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/Insert',
            dataCoordinator__pb2.ModifyDataset.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/Update',
            dataCoordinator__pb2.ModifyDataset.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/Delete',
            dataCoordinator__pb2.DeleteDataset.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VectorSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/VectorSearch',
            dataCoordinator__pb2.SearchReq.SerializeToString,
            dataCoordinator__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FilterSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/FilterSearch',
            dataCoordinator__pb2.SearchReq.SerializeToString,
            dataCoordinator__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HybridSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/HybridSearch',
            dataCoordinator__pb2.SearchReq.SerializeToString,
            dataCoordinator__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchInsert(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/BatchInsert',
            dataCoordinator__pb2.StreamModifyDataset.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchUpdate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/BatchUpdate',
            dataCoordinator__pb2.StreamModifyDataset.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/BatchDelete',
            dataCoordinator__pb2.BatchDeleteIds.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformanceCompaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dataCoordinatorV2.DatasetCoordinator/PerformanceCompaction',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dataCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
