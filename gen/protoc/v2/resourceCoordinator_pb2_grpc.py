# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import resourceCoordinator_pb2 as resourceCoordinator__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in resourceCoordinator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ResourceCoordinatorStub(object):
    """resource coordinator is using managed resource, vector bucket managing
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/Ping',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateCollection = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/CreateCollection',
                request_serializer=resourceCoordinator__pb2.Collection.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.CollectionResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/DeleteCollection',
                request_serializer=resourceCoordinator__pb2.CollectionName.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.DeleteCollectionResponse.FromString,
                _registered_method=True)
        self.GetCollection = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/GetCollection',
                request_serializer=resourceCoordinator__pb2.CollectionName.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.CollectionDetail.FromString,
                _registered_method=True)
        self.GetAllCollections = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/GetAllCollections',
                request_serializer=resourceCoordinator__pb2.GetCollections.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.CollectionLists.FromString,
                _registered_method=True)
        self.LoadCollection = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/LoadCollection',
                request_serializer=resourceCoordinator__pb2.CollectionName.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.CollectionDetail.FromString,
                _registered_method=True)
        self.ReleaseCollection = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/ReleaseCollection',
                request_serializer=resourceCoordinator__pb2.CollectionName.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.Response.FromString,
                _registered_method=True)
        self.LoadResourceInfo = channel.unary_unary(
                '/resourceCoordinatorV2.ResourceCoordinator/LoadResourceInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=resourceCoordinator__pb2.SystemInfo.FromString,
                _registered_method=True)


class ResourceCoordinatorServicer(object):
    """resource coordinator is using managed resource, vector bucket managing
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadResourceInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceCoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=resourceCoordinator__pb2.Collection.FromString,
                    response_serializer=resourceCoordinator__pb2.CollectionResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=resourceCoordinator__pb2.CollectionName.FromString,
                    response_serializer=resourceCoordinator__pb2.DeleteCollectionResponse.SerializeToString,
            ),
            'GetCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollection,
                    request_deserializer=resourceCoordinator__pb2.CollectionName.FromString,
                    response_serializer=resourceCoordinator__pb2.CollectionDetail.SerializeToString,
            ),
            'GetAllCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllCollections,
                    request_deserializer=resourceCoordinator__pb2.GetCollections.FromString,
                    response_serializer=resourceCoordinator__pb2.CollectionLists.SerializeToString,
            ),
            'LoadCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadCollection,
                    request_deserializer=resourceCoordinator__pb2.CollectionName.FromString,
                    response_serializer=resourceCoordinator__pb2.CollectionDetail.SerializeToString,
            ),
            'ReleaseCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseCollection,
                    request_deserializer=resourceCoordinator__pb2.CollectionName.FromString,
                    response_serializer=resourceCoordinator__pb2.Response.SerializeToString,
            ),
            'LoadResourceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadResourceInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=resourceCoordinator__pb2.SystemInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'resourceCoordinatorV2.ResourceCoordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('resourceCoordinatorV2.ResourceCoordinator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ResourceCoordinator(object):
    """resource coordinator is using managed resource, vector bucket managing
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/Ping',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/CreateCollection',
            resourceCoordinator__pb2.Collection.SerializeToString,
            resourceCoordinator__pb2.CollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/DeleteCollection',
            resourceCoordinator__pb2.CollectionName.SerializeToString,
            resourceCoordinator__pb2.DeleteCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/GetCollection',
            resourceCoordinator__pb2.CollectionName.SerializeToString,
            resourceCoordinator__pb2.CollectionDetail.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/GetAllCollections',
            resourceCoordinator__pb2.GetCollections.SerializeToString,
            resourceCoordinator__pb2.CollectionLists.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/LoadCollection',
            resourceCoordinator__pb2.CollectionName.SerializeToString,
            resourceCoordinator__pb2.CollectionDetail.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/ReleaseCollection',
            resourceCoordinator__pb2.CollectionName.SerializeToString,
            resourceCoordinator__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadResourceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/resourceCoordinatorV2.ResourceCoordinator/LoadResourceInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            resourceCoordinator__pb2.SystemInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
