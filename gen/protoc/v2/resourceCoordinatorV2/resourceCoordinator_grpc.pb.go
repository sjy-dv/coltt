// Licensed to sjy-dv under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. sjy-dv licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: idl/proto/v2/resourceCoordinator.proto

package resourceCoordinatorV2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceCoordinator_Ping_FullMethodName              = "/resourceCoordinatorV2.ResourceCoordinator/Ping"
	ResourceCoordinator_CreateCollection_FullMethodName  = "/resourceCoordinatorV2.ResourceCoordinator/CreateCollection"
	ResourceCoordinator_DeleteCollection_FullMethodName  = "/resourceCoordinatorV2.ResourceCoordinator/DeleteCollection"
	ResourceCoordinator_GetCollection_FullMethodName     = "/resourceCoordinatorV2.ResourceCoordinator/GetCollection"
	ResourceCoordinator_GetAllCollections_FullMethodName = "/resourceCoordinatorV2.ResourceCoordinator/GetAllCollections"
	ResourceCoordinator_LoadCollection_FullMethodName    = "/resourceCoordinatorV2.ResourceCoordinator/LoadCollection"
	ResourceCoordinator_ReleaseCollection_FullMethodName = "/resourceCoordinatorV2.ResourceCoordinator/ReleaseCollection"
	ResourceCoordinator_LoadResourceInfo_FullMethodName  = "/resourceCoordinatorV2.ResourceCoordinator/LoadResourceInfo"
)

// ResourceCoordinatorClient is the client API for ResourceCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// resource coordinator is using managed resource, vector bucket managing
type ResourceCoordinatorClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionResponse, error)
	DeleteCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
	GetCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionDetail, error)
	GetAllCollections(ctx context.Context, in *GetCollections, opts ...grpc.CallOption) (*CollectionLists, error)
	LoadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionDetail, error)
	ReleaseCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Response, error)
	LoadResourceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemInfo, error)
}

type resourceCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceCoordinatorClient(cc grpc.ClientConnInterface) ResourceCoordinatorClient {
	return &resourceCoordinatorClient{cc}
}

func (c *resourceCoordinatorClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourceCoordinator_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, ResourceCoordinator_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) DeleteCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollectionResponse)
	err := c.cc.Invoke(ctx, ResourceCoordinator_DeleteCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) GetCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionDetail)
	err := c.cc.Invoke(ctx, ResourceCoordinator_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) GetAllCollections(ctx context.Context, in *GetCollections, opts ...grpc.CallOption) (*CollectionLists, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionLists)
	err := c.cc.Invoke(ctx, ResourceCoordinator_GetAllCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) LoadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionDetail)
	err := c.cc.Invoke(ctx, ResourceCoordinator_LoadCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) ReleaseCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ResourceCoordinator_ReleaseCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) LoadResourceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, ResourceCoordinator_LoadResourceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceCoordinatorServer is the server API for ResourceCoordinator service.
// All implementations should embed UnimplementedResourceCoordinatorServer
// for forward compatibility.
//
// resource coordinator is using managed resource, vector bucket managing
type ResourceCoordinatorServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateCollection(context.Context, *Collection) (*CollectionResponse, error)
	DeleteCollection(context.Context, *CollectionName) (*DeleteCollectionResponse, error)
	GetCollection(context.Context, *CollectionName) (*CollectionDetail, error)
	GetAllCollections(context.Context, *GetCollections) (*CollectionLists, error)
	LoadCollection(context.Context, *CollectionName) (*CollectionDetail, error)
	ReleaseCollection(context.Context, *CollectionName) (*Response, error)
	LoadResourceInfo(context.Context, *emptypb.Empty) (*SystemInfo, error)
}

// UnimplementedResourceCoordinatorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceCoordinatorServer struct{}

func (UnimplementedResourceCoordinatorServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedResourceCoordinatorServer) CreateCollection(context.Context, *Collection) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedResourceCoordinatorServer) DeleteCollection(context.Context, *CollectionName) (*DeleteCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedResourceCoordinatorServer) GetCollection(context.Context, *CollectionName) (*CollectionDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedResourceCoordinatorServer) GetAllCollections(context.Context, *GetCollections) (*CollectionLists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCollections not implemented")
}
func (UnimplementedResourceCoordinatorServer) LoadCollection(context.Context, *CollectionName) (*CollectionDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (UnimplementedResourceCoordinatorServer) ReleaseCollection(context.Context, *CollectionName) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (UnimplementedResourceCoordinatorServer) LoadResourceInfo(context.Context, *emptypb.Empty) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadResourceInfo not implemented")
}
func (UnimplementedResourceCoordinatorServer) testEmbeddedByValue() {}

// UnsafeResourceCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceCoordinatorServer will
// result in compilation errors.
type UnsafeResourceCoordinatorServer interface {
	mustEmbedUnimplementedResourceCoordinatorServer()
}

func RegisterResourceCoordinatorServer(s grpc.ServiceRegistrar, srv ResourceCoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedResourceCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceCoordinator_ServiceDesc, srv)
}

func _ResourceCoordinator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).CreateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).DeleteCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).GetCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_GetAllCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).GetAllCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_GetAllCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).GetAllCollections(ctx, req.(*GetCollections))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_LoadCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).LoadCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_ReleaseCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).ReleaseCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_LoadResourceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).LoadResourceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_LoadResourceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).LoadResourceInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceCoordinator_ServiceDesc is the grpc.ServiceDesc for ResourceCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourceCoordinatorV2.ResourceCoordinator",
	HandlerType: (*ResourceCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ResourceCoordinator_Ping_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _ResourceCoordinator_CreateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _ResourceCoordinator_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _ResourceCoordinator_GetCollection_Handler,
		},
		{
			MethodName: "GetAllCollections",
			Handler:    _ResourceCoordinator_GetAllCollections_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _ResourceCoordinator_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _ResourceCoordinator_ReleaseCollection_Handler,
		},
		{
			MethodName: "LoadResourceInfo",
			Handler:    _ResourceCoordinator_LoadResourceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/proto/v2/resourceCoordinator.proto",
}
