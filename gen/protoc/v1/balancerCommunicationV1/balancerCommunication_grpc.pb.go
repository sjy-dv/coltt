// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: idl/proto/v1/balancerCommunication.proto

package balancerCommunicationV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LBCoordinator_Ping_FullMethodName             = "/balancerCommunicationV1.LBCoordinator/Ping"
	LBCoordinator_CreateCollection_FullMethodName = "/balancerCommunicationV1.LBCoordinator/CreateCollection"
	LBCoordinator_DropCollection_FullMethodName   = "/balancerCommunicationV1.LBCoordinator/DropCollection"
	LBCoordinator_GetCollection_FullMethodName    = "/balancerCommunicationV1.LBCoordinator/GetCollection"
	LBCoordinator_ListCollection_FullMethodName   = "/balancerCommunicationV1.LBCoordinator/ListCollection"
	LBCoordinator_Insert_FullMethodName           = "/balancerCommunicationV1.LBCoordinator/Insert"
	LBCoordinator_Update_FullMethodName           = "/balancerCommunicationV1.LBCoordinator/Update"
	LBCoordinator_Delete_FullMethodName           = "/balancerCommunicationV1.LBCoordinator/Delete"
	LBCoordinator_BatchInsert_FullMethodName      = "/balancerCommunicationV1.LBCoordinator/BatchInsert"
	LBCoordinator_BatchUpdate_FullMethodName      = "/balancerCommunicationV1.LBCoordinator/BatchUpdate"
	LBCoordinator_BatchDelete_FullMethodName      = "/balancerCommunicationV1.LBCoordinator/BatchDelete"
	LBCoordinator_VectorSearch_FullMethodName     = "/balancerCommunicationV1.LBCoordinator/VectorSearch"
	LBCoordinator_FilterSearch_FullMethodName     = "/balancerCommunicationV1.LBCoordinator/FilterSearch"
	LBCoordinator_HybridSearch_FullMethodName     = "/balancerCommunicationV1.LBCoordinator/HybridSearch"
	LBCoordinator_DataLoader_FullMethodName       = "/balancerCommunicationV1.LBCoordinator/DataLoader"
)

// LBCoordinatorClient is the client API for LBCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LBCoordinatorClient interface {
	// check health
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// collection service
	CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionResponse, error)
	DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Response, error)
	GetCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Collection, error)
	ListCollection(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CollectionList, error)
	// vector data communication
	Insert(ctx context.Context, in *ModifyDataset, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *ModifyDataset, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteDataset, opts ...grpc.CallOption) (*Response, error)
	BatchInsert(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyDataset, Response], error)
	BatchUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyDataset, Response], error)
	BatchDelete(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteDataset, Response], error)
	// vectorsearch <- only search vector query
	// filtersearch <- not using vector, only use filter
	// hybrid filter + vector
	VectorSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResponse, error)
	FilterSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResponse, error)
	HybridSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResponse, error)
	// sync
	DataLoader(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyDataset, Response], error)
}

type lBCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewLBCoordinatorClient(cc grpc.ClientConnInterface) LBCoordinatorClient {
	return &lBCoordinatorClient{cc}
}

func (c *lBCoordinatorClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LBCoordinator_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, LBCoordinator_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LBCoordinator_DropCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) GetCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Collection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collection)
	err := c.cc.Invoke(ctx, LBCoordinator_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) ListCollection(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CollectionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionList)
	err := c.cc.Invoke(ctx, LBCoordinator_ListCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) Insert(ctx context.Context, in *ModifyDataset, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LBCoordinator_Insert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) Update(ctx context.Context, in *ModifyDataset, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LBCoordinator_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) Delete(ctx context.Context, in *DeleteDataset, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LBCoordinator_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) BatchInsert(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyDataset, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LBCoordinator_ServiceDesc.Streams[0], LBCoordinator_BatchInsert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ModifyDataset, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_BatchInsertClient = grpc.BidiStreamingClient[ModifyDataset, Response]

func (c *lBCoordinatorClient) BatchUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyDataset, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LBCoordinator_ServiceDesc.Streams[1], LBCoordinator_BatchUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ModifyDataset, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_BatchUpdateClient = grpc.BidiStreamingClient[ModifyDataset, Response]

func (c *lBCoordinatorClient) BatchDelete(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteDataset, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LBCoordinator_ServiceDesc.Streams[2], LBCoordinator_BatchDelete_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeleteDataset, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_BatchDeleteClient = grpc.BidiStreamingClient[DeleteDataset, Response]

func (c *lBCoordinatorClient) VectorSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, LBCoordinator_VectorSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) FilterSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, LBCoordinator_FilterSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) HybridSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, LBCoordinator_HybridSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBCoordinatorClient) DataLoader(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModifyDataset, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LBCoordinator_ServiceDesc.Streams[3], LBCoordinator_DataLoader_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ModifyDataset, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_DataLoaderClient = grpc.BidiStreamingClient[ModifyDataset, Response]

// LBCoordinatorServer is the server API for LBCoordinator service.
// All implementations should embed UnimplementedLBCoordinatorServer
// for forward compatibility.
type LBCoordinatorServer interface {
	// check health
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// collection service
	CreateCollection(context.Context, *Collection) (*CollectionResponse, error)
	DropCollection(context.Context, *CollectionName) (*Response, error)
	GetCollection(context.Context, *CollectionName) (*Collection, error)
	ListCollection(context.Context, *emptypb.Empty) (*CollectionList, error)
	// vector data communication
	Insert(context.Context, *ModifyDataset) (*Response, error)
	Update(context.Context, *ModifyDataset) (*Response, error)
	Delete(context.Context, *DeleteDataset) (*Response, error)
	BatchInsert(grpc.BidiStreamingServer[ModifyDataset, Response]) error
	BatchUpdate(grpc.BidiStreamingServer[ModifyDataset, Response]) error
	BatchDelete(grpc.BidiStreamingServer[DeleteDataset, Response]) error
	// vectorsearch <- only search vector query
	// filtersearch <- not using vector, only use filter
	// hybrid filter + vector
	VectorSearch(context.Context, *SearchReq) (*SearchResponse, error)
	FilterSearch(context.Context, *SearchReq) (*SearchResponse, error)
	HybridSearch(context.Context, *SearchReq) (*SearchResponse, error)
	// sync
	DataLoader(grpc.BidiStreamingServer[ModifyDataset, Response]) error
}

// UnimplementedLBCoordinatorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLBCoordinatorServer struct{}

func (UnimplementedLBCoordinatorServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLBCoordinatorServer) CreateCollection(context.Context, *Collection) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedLBCoordinatorServer) DropCollection(context.Context, *CollectionName) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedLBCoordinatorServer) GetCollection(context.Context, *CollectionName) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedLBCoordinatorServer) ListCollection(context.Context, *emptypb.Empty) (*CollectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollection not implemented")
}
func (UnimplementedLBCoordinatorServer) Insert(context.Context, *ModifyDataset) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedLBCoordinatorServer) Update(context.Context, *ModifyDataset) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLBCoordinatorServer) Delete(context.Context, *DeleteDataset) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLBCoordinatorServer) BatchInsert(grpc.BidiStreamingServer[ModifyDataset, Response]) error {
	return status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedLBCoordinatorServer) BatchUpdate(grpc.BidiStreamingServer[ModifyDataset, Response]) error {
	return status.Errorf(codes.Unimplemented, "method BatchUpdate not implemented")
}
func (UnimplementedLBCoordinatorServer) BatchDelete(grpc.BidiStreamingServer[DeleteDataset, Response]) error {
	return status.Errorf(codes.Unimplemented, "method BatchDelete not implemented")
}
func (UnimplementedLBCoordinatorServer) VectorSearch(context.Context, *SearchReq) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorSearch not implemented")
}
func (UnimplementedLBCoordinatorServer) FilterSearch(context.Context, *SearchReq) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSearch not implemented")
}
func (UnimplementedLBCoordinatorServer) HybridSearch(context.Context, *SearchReq) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (UnimplementedLBCoordinatorServer) DataLoader(grpc.BidiStreamingServer[ModifyDataset, Response]) error {
	return status.Errorf(codes.Unimplemented, "method DataLoader not implemented")
}
func (UnimplementedLBCoordinatorServer) testEmbeddedByValue() {}

// UnsafeLBCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LBCoordinatorServer will
// result in compilation errors.
type UnsafeLBCoordinatorServer interface {
	mustEmbedUnimplementedLBCoordinatorServer()
}

func RegisterLBCoordinatorServer(s grpc.ServiceRegistrar, srv LBCoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedLBCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LBCoordinator_ServiceDesc, srv)
}

func _LBCoordinator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).CreateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).DropCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).GetCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_ListCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).ListCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_ListCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).ListCollection(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).Insert(ctx, req.(*ModifyDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).Update(ctx, req.(*ModifyDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).Delete(ctx, req.(*DeleteDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_BatchInsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LBCoordinatorServer).BatchInsert(&grpc.GenericServerStream[ModifyDataset, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_BatchInsertServer = grpc.BidiStreamingServer[ModifyDataset, Response]

func _LBCoordinator_BatchUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LBCoordinatorServer).BatchUpdate(&grpc.GenericServerStream[ModifyDataset, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_BatchUpdateServer = grpc.BidiStreamingServer[ModifyDataset, Response]

func _LBCoordinator_BatchDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LBCoordinatorServer).BatchDelete(&grpc.GenericServerStream[DeleteDataset, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_BatchDeleteServer = grpc.BidiStreamingServer[DeleteDataset, Response]

func _LBCoordinator_VectorSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).VectorSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_VectorSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).VectorSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_FilterSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).FilterSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_FilterSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).FilterSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCoordinatorServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LBCoordinator_HybridSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCoordinatorServer).HybridSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBCoordinator_DataLoader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LBCoordinatorServer).DataLoader(&grpc.GenericServerStream[ModifyDataset, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LBCoordinator_DataLoaderServer = grpc.BidiStreamingServer[ModifyDataset, Response]

// LBCoordinator_ServiceDesc is the grpc.ServiceDesc for LBCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LBCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "balancerCommunicationV1.LBCoordinator",
	HandlerType: (*LBCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LBCoordinator_Ping_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _LBCoordinator_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _LBCoordinator_DropCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _LBCoordinator_GetCollection_Handler,
		},
		{
			MethodName: "ListCollection",
			Handler:    _LBCoordinator_ListCollection_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _LBCoordinator_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LBCoordinator_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LBCoordinator_Delete_Handler,
		},
		{
			MethodName: "VectorSearch",
			Handler:    _LBCoordinator_VectorSearch_Handler,
		},
		{
			MethodName: "FilterSearch",
			Handler:    _LBCoordinator_FilterSearch_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _LBCoordinator_HybridSearch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchInsert",
			Handler:       _LBCoordinator_BatchInsert_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchUpdate",
			Handler:       _LBCoordinator_BatchUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchDelete",
			Handler:       _LBCoordinator_BatchDelete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DataLoader",
			Handler:       _LBCoordinator_DataLoader_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "idl/proto/v1/balancerCommunication.proto",
}
