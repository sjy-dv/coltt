// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: idl/proto/v1/resourceCoordinator.proto

package resourceCoordinatorV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceCoordinator_Ping_FullMethodName                  = "/resourceCoordinatorV1.ResourceCoordinator/Ping"
	ResourceCoordinator_CreateBucket_FullMethodName          = "/resourceCoordinatorV1.ResourceCoordinator/CreateBucket"
	ResourceCoordinator_DeleteBucket_FullMethodName          = "/resourceCoordinatorV1.ResourceCoordinator/DeleteBucket"
	ResourceCoordinator_GetBucket_FullMethodName             = "/resourceCoordinatorV1.ResourceCoordinator/GetBucket"
	ResourceCoordinator_GetAllBuckets_FullMethodName         = "/resourceCoordinatorV1.ResourceCoordinator/GetAllBuckets"
	ResourceCoordinator_LoadResourceInfo_FullMethodName      = "/resourceCoordinatorV1.ResourceCoordinator/LoadResourceInfo"
	ResourceCoordinator_PerformanceCompaction_FullMethodName = "/resourceCoordinatorV1.ResourceCoordinator/PerformanceCompaction"
)

// ResourceCoordinatorClient is the client API for ResourceCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// resource coordinator is using managed resource, vector bucket managing
type ResourceCoordinatorClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*BucketResponse, error)
	DeleteBucket(ctx context.Context, in *BucketName, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	GetBucket(ctx context.Context, in *BucketName, opts ...grpc.CallOption) (*BucketDetail, error)
	GetAllBuckets(ctx context.Context, in *GetBuckets, opts ...grpc.CallOption) (*BucketsList, error)
	LoadResourceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemInfo, error)
	// storage performance compaction
	// There may not be much change in memory usage. Because its main purpose is to reorder disk hashes.
	// It may conflict with multiple tasks, so we recommend avoiding it during busy times and running it during idle times.
	PerformanceCompaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
}

type resourceCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceCoordinatorClient(cc grpc.ClientConnInterface) ResourceCoordinatorClient {
	return &resourceCoordinatorClient{cc}
}

func (c *resourceCoordinatorClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourceCoordinator_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) CreateBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*BucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketResponse)
	err := c.cc.Invoke(ctx, ResourceCoordinator_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) DeleteBucket(ctx context.Context, in *BucketName, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, ResourceCoordinator_DeleteBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) GetBucket(ctx context.Context, in *BucketName, opts ...grpc.CallOption) (*BucketDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketDetail)
	err := c.cc.Invoke(ctx, ResourceCoordinator_GetBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) GetAllBuckets(ctx context.Context, in *GetBuckets, opts ...grpc.CallOption) (*BucketsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketsList)
	err := c.cc.Invoke(ctx, ResourceCoordinator_GetAllBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) LoadResourceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, ResourceCoordinator_LoadResourceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCoordinatorClient) PerformanceCompaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ResourceCoordinator_PerformanceCompaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceCoordinatorServer is the server API for ResourceCoordinator service.
// All implementations should embed UnimplementedResourceCoordinatorServer
// for forward compatibility.
//
// resource coordinator is using managed resource, vector bucket managing
type ResourceCoordinatorServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateBucket(context.Context, *Bucket) (*BucketResponse, error)
	DeleteBucket(context.Context, *BucketName) (*DeleteBucketResponse, error)
	GetBucket(context.Context, *BucketName) (*BucketDetail, error)
	GetAllBuckets(context.Context, *GetBuckets) (*BucketsList, error)
	LoadResourceInfo(context.Context, *emptypb.Empty) (*SystemInfo, error)
	// storage performance compaction
	// There may not be much change in memory usage. Because its main purpose is to reorder disk hashes.
	// It may conflict with multiple tasks, so we recommend avoiding it during busy times and running it during idle times.
	PerformanceCompaction(context.Context, *emptypb.Empty) (*Response, error)
}

// UnimplementedResourceCoordinatorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceCoordinatorServer struct{}

func (UnimplementedResourceCoordinatorServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedResourceCoordinatorServer) CreateBucket(context.Context, *Bucket) (*BucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedResourceCoordinatorServer) DeleteBucket(context.Context, *BucketName) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedResourceCoordinatorServer) GetBucket(context.Context, *BucketName) (*BucketDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucket not implemented")
}
func (UnimplementedResourceCoordinatorServer) GetAllBuckets(context.Context, *GetBuckets) (*BucketsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBuckets not implemented")
}
func (UnimplementedResourceCoordinatorServer) LoadResourceInfo(context.Context, *emptypb.Empty) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadResourceInfo not implemented")
}
func (UnimplementedResourceCoordinatorServer) PerformanceCompaction(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformanceCompaction not implemented")
}
func (UnimplementedResourceCoordinatorServer) testEmbeddedByValue() {}

// UnsafeResourceCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceCoordinatorServer will
// result in compilation errors.
type UnsafeResourceCoordinatorServer interface {
	mustEmbedUnimplementedResourceCoordinatorServer()
}

func RegisterResourceCoordinatorServer(s grpc.ServiceRegistrar, srv ResourceCoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedResourceCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceCoordinator_ServiceDesc, srv)
}

func _ResourceCoordinator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).CreateBucket(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).DeleteBucket(ctx, req.(*BucketName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_GetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).GetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_GetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).GetBucket(ctx, req.(*BucketName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_GetAllBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuckets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).GetAllBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_GetAllBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).GetAllBuckets(ctx, req.(*GetBuckets))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_LoadResourceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).LoadResourceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_LoadResourceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).LoadResourceInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCoordinator_PerformanceCompaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCoordinatorServer).PerformanceCompaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCoordinator_PerformanceCompaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCoordinatorServer).PerformanceCompaction(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceCoordinator_ServiceDesc is the grpc.ServiceDesc for ResourceCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourceCoordinatorV1.ResourceCoordinator",
	HandlerType: (*ResourceCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ResourceCoordinator_Ping_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _ResourceCoordinator_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _ResourceCoordinator_DeleteBucket_Handler,
		},
		{
			MethodName: "GetBucket",
			Handler:    _ResourceCoordinator_GetBucket_Handler,
		},
		{
			MethodName: "GetAllBuckets",
			Handler:    _ResourceCoordinator_GetAllBuckets_Handler,
		},
		{
			MethodName: "LoadResourceInfo",
			Handler:    _ResourceCoordinator_LoadResourceInfo_Handler,
		},
		{
			MethodName: "PerformanceCompaction",
			Handler:    _ResourceCoordinator_PerformanceCompaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/proto/v1/resourceCoordinator.proto",
}
