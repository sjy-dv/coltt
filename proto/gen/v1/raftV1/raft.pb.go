// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft.proto

package raftV1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	coreV1 "github.com/sjy-dv/vemoo/proto/gen/v1/coreV1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RaftLog struct {
	GroupId              []byte   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftLog) Reset()         { *m = RaftLog{} }
func (m *RaftLog) String() string { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()    {}
func (*RaftLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}
func (m *RaftLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLog.Merge(m, src)
}
func (m *RaftLog) XXX_Size() int {
	return m.Size()
}
func (m *RaftLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLog.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLog proto.InternalMessageInfo

func (m *RaftLog) GetGroupId() []byte {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *RaftLog) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type GroupProposalAction struct {
	ProxyName            string   `protobuf:"bytes,1,opt,name=proxy_name,json=proxyName,proto3" json:"proxy_name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupProposalAction) Reset()         { *m = GroupProposalAction{} }
func (m *GroupProposalAction) String() string { return proto.CompactTextString(m) }
func (*GroupProposalAction) ProtoMessage()    {}
func (*GroupProposalAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}
func (m *GroupProposalAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupProposalAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupProposalAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupProposalAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupProposalAction.Merge(m, src)
}
func (m *GroupProposalAction) XXX_Size() int {
	return m.Size()
}
func (m *GroupProposalAction) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupProposalAction.DiscardUnknown(m)
}

var xxx_messageInfo_GroupProposalAction proto.InternalMessageInfo

func (m *GroupProposalAction) GetProxyName() string {
	if m != nil {
		return m.ProxyName
	}
	return ""
}

func (m *GroupProposalAction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GroupStateSnapshot struct {
	ProxySnapshots       map[string][]byte `protobuf:"bytes,1,rep,name=proxy_snapshots,json=proxySnapshots,proto3" json:"proxy_snapshots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupStateSnapshot) Reset()         { *m = GroupStateSnapshot{} }
func (m *GroupStateSnapshot) String() string { return proto.CompactTextString(m) }
func (*GroupStateSnapshot) ProtoMessage()    {}
func (*GroupStateSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}
func (m *GroupStateSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupStateSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupStateSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupStateSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupStateSnapshot.Merge(m, src)
}
func (m *GroupStateSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GroupStateSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupStateSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GroupStateSnapshot proto.InternalMessageInfo

func (m *GroupStateSnapshot) GetProxySnapshots() map[string][]byte {
	if m != nil {
		return m.ProxySnapshots
	}
	return nil
}

func init() {
	proto.RegisterType((*RaftLog)(nil), "RaftV1.RaftLog")
	proto.RegisterType((*GroupProposalAction)(nil), "RaftV1.GroupProposalAction")
	proto.RegisterType((*GroupStateSnapshot)(nil), "RaftV1.GroupStateSnapshot")
	proto.RegisterMapType((map[string][]byte)(nil), "RaftV1.GroupStateSnapshot.ProxySnapshotsEntry")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4a, 0xe3, 0x40,
	0x14, 0xc6, 0x77, 0xda, 0xdd, 0x66, 0x7b, 0xf6, 0x4f, 0x97, 0x69, 0x2f, 0xb2, 0x85, 0x0d, 0xa5,
	0x57, 0x85, 0xc5, 0x89, 0xad, 0x37, 0x22, 0x28, 0x54, 0x28, 0x2a, 0xa8, 0x94, 0x54, 0x2a, 0x78,
	0x53, 0xa6, 0xc9, 0x34, 0x8d, 0x36, 0x99, 0x61, 0x66, 0x1a, 0xcc, 0x9b, 0xf8, 0x18, 0x3e, 0x86,
	0x97, 0x3e, 0x82, 0xd4, 0x17, 0x91, 0x4c, 0xd2, 0x0b, 0xd1, 0xbb, 0xf3, 0xfd, 0xe6, 0x9c, 0x8f,
	0x73, 0xbe, 0x01, 0x90, 0x74, 0xa1, 0x89, 0x90, 0x5c, 0x73, 0x5c, 0xf3, 0xe8, 0x42, 0x4f, 0xfb,
	0x6d, 0xf0, 0xb9, 0x64, 0x05, 0xeb, 0x1e, 0x81, 0x95, 0xd3, 0x73, 0x1e, 0xe2, 0xbf, 0xf0, 0x3d,
	0x94, 0x7c, 0x2d, 0x66, 0x51, 0x60, 0xa3, 0x0e, 0xea, 0xfd, 0xf4, 0x2c, 0xa3, 0xcf, 0x02, 0x6c,
	0x83, 0x15, 0x33, 0xa5, 0x68, 0xc8, 0xec, 0x4a, 0xf1, 0x52, 0xca, 0xee, 0x29, 0x34, 0x4f, 0xf2,
	0xa6, 0xb1, 0xe4, 0x82, 0x2b, 0xba, 0x1a, 0xfa, 0x3a, 0xe2, 0x09, 0xfe, 0x07, 0x20, 0x24, 0xbf,
	0xcf, 0x66, 0x09, 0x8d, 0x99, 0x71, 0xab, 0x7b, 0x75, 0x43, 0x2e, 0x69, 0xcc, 0x30, 0x86, 0xaf,
	0x01, 0xd5, 0xb4, 0x34, 0x33, 0x75, 0xf7, 0x11, 0x01, 0x36, 0x56, 0x13, 0x4d, 0x35, 0x9b, 0x24,
	0x54, 0xa8, 0x25, 0xd7, 0xf8, 0x1a, 0x1a, 0x85, 0x93, 0x2a, 0x89, 0xb2, 0x51, 0xa7, 0xda, 0xfb,
	0x31, 0x20, 0xa4, 0x38, 0x87, 0x7c, 0x1c, 0x22, 0xe3, 0x7c, 0x62, 0xab, 0xd4, 0x28, 0xd1, 0x32,
	0xf3, 0x7e, 0x8b, 0x77, 0xb0, 0x3d, 0x84, 0xe6, 0x27, 0x6d, 0xf8, 0x0f, 0x54, 0xef, 0x58, 0x56,
	0xae, 0x9c, 0x97, 0xb8, 0x05, 0xdf, 0x52, 0xba, 0x5a, 0x6f, 0x4f, 0x2f, 0xc4, 0x41, 0x65, 0x1f,
	0x0d, 0x86, 0xf0, 0x2b, 0xdf, 0xe1, 0x4a, 0xd2, 0x44, 0x09, 0x2e, 0x35, 0xde, 0x05, 0xcb, 0x63,
	0x3e, 0x8b, 0x52, 0x86, 0x1b, 0xdb, 0xf5, 0xca, 0x78, 0xdb, 0x2d, 0x92, 0xc7, 0x3e, 0xed, 0x93,
	0x51, 0x2c, 0x74, 0x76, 0x51, 0xe4, 0x77, 0x7c, 0xf8, 0xb4, 0x71, 0xd0, 0xf3, 0xc6, 0x41, 0x2f,
	0x1b, 0x07, 0x3d, 0xbc, 0x3a, 0x5f, 0x6e, 0xfe, 0x87, 0x91, 0x5e, 0xae, 0xe7, 0xc4, 0xe7, 0xb1,
	0xab, 0x6e, 0xb3, 0x9d, 0x20, 0x75, 0x53, 0x16, 0x73, 0xee, 0x9a, 0x0f, 0x73, 0x43, 0x96, 0xb8,
	0x69, 0xdf, 0x95, 0xc6, 0x7c, 0x5e, 0x33, 0x70, 0xef, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xd2,
	0x3d, 0xbf, 0xe7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftTransportClient is the client API for RaftTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftTransportClient interface {
	Receive(ctx context.Context, in *RaftLog, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error)
}

type raftTransportClient struct {
	cc *grpc.ClientConn
}

func NewRaftTransportClient(cc *grpc.ClientConn) RaftTransportClient {
	return &raftTransportClient{cc}
}

func (c *raftTransportClient) Receive(ctx context.Context, in *RaftLog, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error) {
	out := new(coreV1.EmptyMessage)
	err := c.cc.Invoke(ctx, "/RaftV1.RaftTransport/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftTransportServer is the server API for RaftTransport service.
type RaftTransportServer interface {
	Receive(context.Context, *RaftLog) (*coreV1.EmptyMessage, error)
}

// UnimplementedRaftTransportServer can be embedded to have forward compatible implementations.
type UnimplementedRaftTransportServer struct {
}

func (*UnimplementedRaftTransportServer) Receive(ctx context.Context, req *RaftLog) (*coreV1.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterRaftTransportServer(s *grpc.Server, srv RaftTransportServer) {
	s.RegisterService(&_RaftTransport_serviceDesc, srv)
}

func _RaftTransport_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftV1.RaftTransport/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServer).Receive(ctx, req.(*RaftLog))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftTransport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RaftV1.RaftTransport",
	HandlerType: (*RaftTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _RaftTransport_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func (m *RaftLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupProposalAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupProposalAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupProposalAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProxyName) > 0 {
		i -= len(m.ProxyName)
		copy(dAtA[i:], m.ProxyName)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.ProxyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupStateSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupStateSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupStateSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProxySnapshots) > 0 {
		for k := range m.ProxySnapshots {
			v := m.ProxySnapshots[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintRaft(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRaft(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRaft(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupProposalAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProxyName)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupStateSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProxySnapshots) > 0 {
		for k, v := range m.ProxySnapshots {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovRaft(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovRaft(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRaft(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = append(m.GroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupId == nil {
				m.GroupId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupProposalAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupProposalAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupProposalAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupStateSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupStateSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupStateSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxySnapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxySnapshots == nil {
				m.ProxySnapshots = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRaft
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRaft
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthRaft
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthRaft
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRaft(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRaft
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ProxySnapshots[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaft = fmt.Errorf("proto: unexpected end of group")
)
