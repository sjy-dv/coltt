// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cluster.proto

package clusterV1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	coreV1 "github.com/sjy-dv/vemoo/proto/gen/v1/coreV1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// cpu load balancing 1min -> 5min -> 15min check
type NodeMetrics struct {
	Uptime               uint64   `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	CpuLoad1             float64  `protobuf:"fixed64,2,opt,name=cpu_load1,json=cpuLoad1,proto3" json:"cpu_load1,omitempty"`
	CpuLoad5             float64  `protobuf:"fixed64,3,opt,name=cpu_load5,json=cpuLoad5,proto3" json:"cpu_load5,omitempty"`
	CpuLoad15            float64  `protobuf:"fixed64,4,opt,name=cpu_load15,json=cpuLoad15,proto3" json:"cpu_load15,omitempty"`
	MemTotal             uint64   `protobuf:"varint,5,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	MemAvailable         uint64   `protobuf:"varint,6,opt,name=mem_available,json=memAvailable,proto3" json:"mem_available,omitempty"`
	MemUsed              uint64   `protobuf:"varint,7,opt,name=mem_used,json=memUsed,proto3" json:"mem_used,omitempty"`
	MemFree              uint64   `protobuf:"varint,8,opt,name=mem_free,json=memFree,proto3" json:"mem_free,omitempty"`
	MemUsedPercent       float64  `protobuf:"fixed64,9,opt,name=mem_used_percent,json=memUsedPercent,proto3" json:"mem_used_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMetrics) Reset()         { *m = NodeMetrics{} }
func (m *NodeMetrics) String() string { return proto.CompactTextString(m) }
func (*NodeMetrics) ProtoMessage()    {}
func (*NodeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{1}
}
func (m *NodeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetrics.Merge(m, src)
}
func (m *NodeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *NodeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetrics proto.InternalMessageInfo

func (m *NodeMetrics) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NodeMetrics) GetCpuLoad1() float64 {
	if m != nil {
		return m.CpuLoad1
	}
	return 0
}

func (m *NodeMetrics) GetCpuLoad5() float64 {
	if m != nil {
		return m.CpuLoad5
	}
	return 0
}

func (m *NodeMetrics) GetCpuLoad15() float64 {
	if m != nil {
		return m.CpuLoad15
	}
	return 0
}

func (m *NodeMetrics) GetMemTotal() uint64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *NodeMetrics) GetMemAvailable() uint64 {
	if m != nil {
		return m.MemAvailable
	}
	return 0
}

func (m *NodeMetrics) GetMemUsed() uint64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *NodeMetrics) GetMemFree() uint64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *NodeMetrics) GetMemUsedPercent() float64 {
	if m != nil {
		return m.MemUsedPercent
	}
	return 0
}

func init() {
	proto.RegisterType((*Node)(nil), "clusterV1.Node")
	proto.RegisterType((*NodeMetrics)(nil), "clusterV1.NodeMetrics")
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376) }

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6b, 0x14, 0x31,
	0x18, 0x86, 0xcd, 0xba, 0xee, 0xee, 0x7c, 0xda, 0x5a, 0x82, 0x94, 0x58, 0x71, 0x29, 0xf5, 0xb2,
	0x97, 0xce, 0x74, 0xad, 0x0b, 0x1e, 0xad, 0xa2, 0x20, 0xb4, 0x22, 0x83, 0xf6, 0xe0, 0x65, 0xc8,
	0x4e, 0xbe, 0xae, 0x91, 0xc9, 0x64, 0x48, 0x32, 0x03, 0xfd, 0x27, 0x1e, 0xfd, 0x39, 0x1e, 0xfd,
	0x09, 0xb2, 0x82, 0xbf, 0x43, 0x92, 0xce, 0x0c, 0xba, 0xac, 0xc7, 0xf7, 0x7d, 0xbf, 0xe7, 0x4b,
	0xc8, 0x1b, 0xd8, 0xc9, 0x8b, 0xda, 0x3a, 0x34, 0x71, 0x65, 0xb4, 0xd3, 0x34, 0x6a, 0xe5, 0xe5,
	0xfc, 0x00, 0x72, 0x6d, 0xf0, 0xc6, 0x3e, 0x3a, 0x81, 0xe1, 0x3b, 0x2d, 0x90, 0xee, 0xc2, 0x40,
	0x0a, 0x46, 0x0e, 0xc9, 0x6c, 0x98, 0x0e, 0xa4, 0xa0, 0x0c, 0xc6, 0x5c, 0x08, 0x83, 0xd6, 0xb2,
	0xc1, 0x21, 0x99, 0x45, 0x69, 0x27, 0x8f, 0xbe, 0x0d, 0xe0, 0xae, 0x47, 0x2e, 0xd0, 0x19, 0x99,
	0x5b, 0xba, 0x0f, 0xa3, 0xba, 0x72, 0x52, 0x61, 0x4b, 0xb7, 0x8a, 0x3e, 0x82, 0x28, 0xaf, 0xea,
	0xac, 0xd0, 0x5c, 0xcc, 0xc3, 0x0e, 0x92, 0x4e, 0xf2, 0xaa, 0x3e, 0xf7, 0xfa, 0xef, 0x70, 0xc1,
	0x6e, 0xff, 0x13, 0x2e, 0xe8, 0x63, 0x80, 0x9e, 0x5c, 0xb0, 0x61, 0x48, 0xa3, 0x0e, 0x5d, 0x78,
	0x56, 0xa1, 0xca, 0x9c, 0x76, 0xbc, 0x60, 0x77, 0xc2, 0x99, 0x13, 0x85, 0xea, 0x83, 0xd7, 0xf4,
	0x09, 0xec, 0xf8, 0x90, 0x37, 0x5c, 0x16, 0x7c, 0x59, 0x20, 0x1b, 0x85, 0x81, 0x7b, 0x0a, 0xd5,
	0x59, 0xe7, 0xd1, 0x87, 0xe0, 0x81, 0xac, 0xb6, 0x28, 0xd8, 0x38, 0xe4, 0x63, 0x85, 0xea, 0xa3,
	0x45, 0xd1, 0x45, 0x57, 0x06, 0x91, 0x4d, 0xfa, 0xe8, 0x8d, 0x41, 0xa4, 0x33, 0xd8, 0xeb, 0xa8,
	0xac, 0x42, 0x93, 0x63, 0xe9, 0x58, 0x14, 0x2e, 0xb7, 0xdb, 0xd2, 0xef, 0x6f, 0xdc, 0xa7, 0xbf,
	0x09, 0xec, 0xf9, 0x27, 0xb2, 0xaf, 0xb4, 0x36, 0x42, 0x96, 0xdc, 0x69, 0x43, 0x9f, 0x41, 0x74,
	0x2e, 0xad, 0x0b, 0x3e, 0x7d, 0x10, 0xfb, 0x0e, 0x2e, 0xe7, 0xf1, 0x6b, 0x55, 0xb9, 0xeb, 0x0b,
	0xb4, 0x96, 0xaf, 0xf0, 0xe0, 0x7e, 0xdc, 0x97, 0x14, 0xfb, 0xb9, 0x13, 0x42, 0x8f, 0x61, 0x7c,
	0x26, 0x44, 0xa8, 0x68, 0x33, 0xdd, 0x36, 0x7e, 0x0a, 0x90, 0xa2, 0xd2, 0x0d, 0x6e, 0x27, 0xb6,
	0x1e, 0x4b, 0x9f, 0xc3, 0xc4, 0x3f, 0xed, 0xdb, 0xf2, 0x4a, 0xff, 0xe7, 0x62, 0xfb, 0x1b, 0x8b,
	0xda, 0xee, 0x5f, 0xbe, 0xf8, 0xbe, 0x9e, 0x92, 0x1f, 0xeb, 0x29, 0xf9, 0xb9, 0x9e, 0x92, 0xaf,
	0xbf, 0xa6, 0xb7, 0x3e, 0xc5, 0x2b, 0xe9, 0x3e, 0xd7, 0xcb, 0x38, 0xd7, 0x2a, 0xb1, 0x5f, 0xae,
	0x8f, 0x45, 0x93, 0x34, 0xa8, 0xb4, 0x4e, 0xc2, 0x77, 0x4b, 0x56, 0x58, 0x26, 0xcd, 0x3c, 0xe9,
	0xb7, 0x2d, 0x47, 0xc1, 0x3f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x17, 0x69, 0x20, 0xa9, 0xae,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodesCoordinatorClient is the client API for NodesCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesCoordinatorClient interface {
	ListNodes(ctx context.Context, in *coreV1.EmptyMessage, opts ...grpc.CallOption) (NodesCoordinator_ListNodesClient, error)
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodesCoordinator_AddNodeClient, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error)
	LoadInfo(ctx context.Context, in *coreV1.EmptyMessage, opts ...grpc.CallOption) (*NodeMetrics, error)
}

type nodesCoordinatorClient struct {
	cc *grpc.ClientConn
}

func NewNodesCoordinatorClient(cc *grpc.ClientConn) NodesCoordinatorClient {
	return &nodesCoordinatorClient{cc}
}

func (c *nodesCoordinatorClient) ListNodes(ctx context.Context, in *coreV1.EmptyMessage, opts ...grpc.CallOption) (NodesCoordinator_ListNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodesCoordinator_serviceDesc.Streams[0], "/clusterV1.NodesCoordinator/ListNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodesCoordinatorListNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodesCoordinator_ListNodesClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodesCoordinatorListNodesClient struct {
	grpc.ClientStream
}

func (x *nodesCoordinatorListNodesClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodesCoordinatorClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodesCoordinator_AddNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodesCoordinator_serviceDesc.Streams[1], "/clusterV1.NodesCoordinator/AddNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodesCoordinatorAddNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodesCoordinator_AddNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodesCoordinatorAddNodeClient struct {
	grpc.ClientStream
}

func (x *nodesCoordinatorAddNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodesCoordinatorClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error) {
	out := new(coreV1.EmptyMessage)
	err := c.cc.Invoke(ctx, "/clusterV1.NodesCoordinator/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesCoordinatorClient) LoadInfo(ctx context.Context, in *coreV1.EmptyMessage, opts ...grpc.CallOption) (*NodeMetrics, error) {
	out := new(NodeMetrics)
	err := c.cc.Invoke(ctx, "/clusterV1.NodesCoordinator/LoadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesCoordinatorServer is the server API for NodesCoordinator service.
type NodesCoordinatorServer interface {
	ListNodes(*coreV1.EmptyMessage, NodesCoordinator_ListNodesServer) error
	AddNode(*Node, NodesCoordinator_AddNodeServer) error
	RemoveNode(context.Context, *Node) (*coreV1.EmptyMessage, error)
	LoadInfo(context.Context, *coreV1.EmptyMessage) (*NodeMetrics, error)
}

// UnimplementedNodesCoordinatorServer can be embedded to have forward compatible implementations.
type UnimplementedNodesCoordinatorServer struct {
}

func (*UnimplementedNodesCoordinatorServer) ListNodes(req *coreV1.EmptyMessage, srv NodesCoordinator_ListNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedNodesCoordinatorServer) AddNode(req *Node, srv NodesCoordinator_AddNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedNodesCoordinatorServer) RemoveNode(ctx context.Context, req *Node) (*coreV1.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (*UnimplementedNodesCoordinatorServer) LoadInfo(ctx context.Context, req *coreV1.EmptyMessage) (*NodeMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadInfo not implemented")
}

func RegisterNodesCoordinatorServer(s *grpc.Server, srv NodesCoordinatorServer) {
	s.RegisterService(&_NodesCoordinator_serviceDesc, srv)
}

func _NodesCoordinator_ListNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(coreV1.EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodesCoordinatorServer).ListNodes(m, &nodesCoordinatorListNodesServer{stream})
}

type NodesCoordinator_ListNodesServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodesCoordinatorListNodesServer struct {
	grpc.ServerStream
}

func (x *nodesCoordinatorListNodesServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodesCoordinator_AddNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodesCoordinatorServer).AddNode(m, &nodesCoordinatorAddNodeServer{stream})
}

type NodesCoordinator_AddNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodesCoordinatorAddNodeServer struct {
	grpc.ServerStream
}

func (x *nodesCoordinatorAddNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodesCoordinator_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesCoordinatorServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterV1.NodesCoordinator/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesCoordinatorServer).RemoveNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesCoordinator_LoadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(coreV1.EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesCoordinatorServer).LoadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterV1.NodesCoordinator/LoadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesCoordinatorServer).LoadInfo(ctx, req.(*coreV1.EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodesCoordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterV1.NodesCoordinator",
	HandlerType: (*NodesCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveNode",
			Handler:    _NodesCoordinator_RemoveNode_Handler,
		},
		{
			MethodName: "LoadInfo",
			Handler:    _NodesCoordinator_LoadInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNodes",
			Handler:       _NodesCoordinator_ListNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddNode",
			Handler:       _NodesCoordinator_AddNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cluster.proto",
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemUsedPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemUsedPercent))))
		i--
		dAtA[i] = 0x49
	}
	if m.MemFree != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.MemFree))
		i--
		dAtA[i] = 0x40
	}
	if m.MemUsed != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.MemUsed))
		i--
		dAtA[i] = 0x38
	}
	if m.MemAvailable != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.MemAvailable))
		i--
		dAtA[i] = 0x30
	}
	if m.MemTotal != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.MemTotal))
		i--
		dAtA[i] = 0x28
	}
	if m.CpuLoad15 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuLoad15))))
		i--
		dAtA[i] = 0x21
	}
	if m.CpuLoad5 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuLoad5))))
		i--
		dAtA[i] = 0x19
	}
	if m.CpuLoad1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuLoad1))))
		i--
		dAtA[i] = 0x11
	}
	if m.Uptime != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCluster(dAtA []byte, offset int, v uint64) int {
	offset -= sovCluster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCluster(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uptime != 0 {
		n += 1 + sovCluster(uint64(m.Uptime))
	}
	if m.CpuLoad1 != 0 {
		n += 9
	}
	if m.CpuLoad5 != 0 {
		n += 9
	}
	if m.CpuLoad15 != 0 {
		n += 9
	}
	if m.MemTotal != 0 {
		n += 1 + sovCluster(uint64(m.MemTotal))
	}
	if m.MemAvailable != 0 {
		n += 1 + sovCluster(uint64(m.MemAvailable))
	}
	if m.MemUsed != 0 {
		n += 1 + sovCluster(uint64(m.MemUsed))
	}
	if m.MemFree != 0 {
		n += 1 + sovCluster(uint64(m.MemFree))
	}
	if m.MemUsedPercent != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCluster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCluster(x uint64) (n int) {
	return sovCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuLoad1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuLoad1 = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuLoad5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuLoad5 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuLoad15", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuLoad15 = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemTotal", wireType)
			}
			m.MemTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemAvailable", wireType)
			}
			m.MemAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemAvailable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemUsed", wireType)
			}
			m.MemUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemFree", wireType)
			}
			m.MemFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemFree |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemUsedPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemUsedPercent = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCluster
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCluster
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCluster
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCluster        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCluster          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCluster = fmt.Errorf("proto: unexpected end of group")
)
