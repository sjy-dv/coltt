// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dataset.proto

package datasetV1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	coreV1 "github.com/sjy-dv/vemoo/proto/gen/v1/coreV1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Space int32

const (
	Space_Euclidean Space = 0
	Space_Manhattan Space = 1
	Space_Cosine    Space = 2
)

var Space_name = map[int32]string{
	0: "Euclidean",
	1: "Manhattan",
	2: "Cosine",
}

var Space_value = map[string]int32{
	"Euclidean": 0,
	"Manhattan": 1,
	"Cosine":    2,
}

func (x Space) String() string {
	return proto.EnumName(Space_name, int32(x))
}

func (Space) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{0}
}

type DatasetManagerChangeType int32

const (
	DatasetManagerChangeType_DatasetManagerCreateDataset        DatasetManagerChangeType = 0
	DatasetManagerChangeType_DatasetManagerDeleteDataset        DatasetManagerChangeType = 1
	DatasetManagerChangeType_DatasetManagerUpdatePartitionNodes DatasetManagerChangeType = 2
)

var DatasetManagerChangeType_name = map[int32]string{
	0: "DatasetManagerCreateDataset",
	1: "DatasetManagerDeleteDataset",
	2: "DatasetManagerUpdatePartitionNodes",
}

var DatasetManagerChangeType_value = map[string]int32{
	"DatasetManagerCreateDataset":        0,
	"DatasetManagerDeleteDataset":        1,
	"DatasetManagerUpdatePartitionNodes": 2,
}

func (x DatasetManagerChangeType) String() string {
	return proto.EnumName(DatasetManagerChangeType_name, int32(x))
}

func (DatasetManagerChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{1}
}

type DatasetPartitionNodesChangeType int32

const (
	DatasetPartitionNodesChangeType_DatasetPartitionNodesChangeAddNode    DatasetPartitionNodesChangeType = 0
	DatasetPartitionNodesChangeType_DatasetPartitionNodesChangeRemoveNode DatasetPartitionNodesChangeType = 1
)

var DatasetPartitionNodesChangeType_name = map[int32]string{
	0: "DatasetPartitionNodesChangeAddNode",
	1: "DatasetPartitionNodesChangeRemoveNode",
}

var DatasetPartitionNodesChangeType_value = map[string]int32{
	"DatasetPartitionNodesChangeAddNode":    0,
	"DatasetPartitionNodesChangeRemoveNode": 1,
}

func (x DatasetPartitionNodesChangeType) String() string {
	return proto.EnumName(DatasetPartitionNodesChangeType_name, int32(x))
}

func (DatasetPartitionNodesChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{2}
}

type PartitionChangeType int32

const (
	PartitionChangeType_PartitionChangeInsertValue      PartitionChangeType = 0
	PartitionChangeType_PartitionChangeUpdateValue      PartitionChangeType = 1
	PartitionChangeType_PartitionChangeDeleteValue      PartitionChangeType = 2
	PartitionChangeType_PartitionChangeBatchInsertValue PartitionChangeType = 3
	PartitionChangeType_PartitionChangeBatchUpdateValue PartitionChangeType = 4
	PartitionChangeType_PartitionChangeBatchDeleteValue PartitionChangeType = 5
)

var PartitionChangeType_name = map[int32]string{
	0: "PartitionChangeInsertValue",
	1: "PartitionChangeUpdateValue",
	2: "PartitionChangeDeleteValue",
	3: "PartitionChangeBatchInsertValue",
	4: "PartitionChangeBatchUpdateValue",
	5: "PartitionChangeBatchDeleteValue",
}

var PartitionChangeType_value = map[string]int32{
	"PartitionChangeInsertValue":      0,
	"PartitionChangeUpdateValue":      1,
	"PartitionChangeDeleteValue":      2,
	"PartitionChangeBatchInsertValue": 3,
	"PartitionChangeBatchUpdateValue": 4,
	"PartitionChangeBatchDeleteValue": 5,
}

func (x PartitionChangeType) String() string {
	return proto.EnumName(PartitionChangeType_name, int32(x))
}

func (PartitionChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{3}
}

type ListDatasetsRequest struct {
	WithSize             bool     `protobuf:"varint,1,opt,name=with_size,json=withSize,proto3" json:"with_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDatasetsRequest) Reset()         { *m = ListDatasetsRequest{} }
func (m *ListDatasetsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDatasetsRequest) ProtoMessage()    {}
func (*ListDatasetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{0}
}
func (m *ListDatasetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDatasetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDatasetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDatasetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDatasetsRequest.Merge(m, src)
}
func (m *ListDatasetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDatasetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDatasetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDatasetsRequest proto.InternalMessageInfo

func (m *ListDatasetsRequest) GetWithSize() bool {
	if m != nil {
		return m.WithSize
	}
	return false
}

type GetDatasetRequest struct {
	DatasetId            []byte   `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	WithSize             bool     `protobuf:"varint,2,opt,name=with_size,json=withSize,proto3" json:"with_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDatasetRequest) Reset()         { *m = GetDatasetRequest{} }
func (m *GetDatasetRequest) String() string { return proto.CompactTextString(m) }
func (*GetDatasetRequest) ProtoMessage()    {}
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{1}
}
func (m *GetDatasetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDatasetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatasetRequest.Merge(m, src)
}
func (m *GetDatasetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatasetRequest proto.InternalMessageInfo

func (m *GetDatasetRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *GetDatasetRequest) GetWithSize() bool {
	if m != nil {
		return m.WithSize
	}
	return false
}

type InsertRequest struct {
	DatasetId            []byte            `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Id                   []byte            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value                []float32         `protobuf:"fixed32,3,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *InsertRequest) Reset()         { *m = InsertRequest{} }
func (m *InsertRequest) String() string { return proto.CompactTextString(m) }
func (*InsertRequest) ProtoMessage()    {}
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{2}
}
func (m *InsertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertRequest.Merge(m, src)
}
func (m *InsertRequest) XXX_Size() int {
	return m.Size()
}
func (m *InsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertRequest proto.InternalMessageInfo

func (m *InsertRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *InsertRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InsertRequest) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *InsertRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type UpdateRequest struct {
	DatasetId            []byte            `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Id                   []byte            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value                []float32         `protobuf:"fixed32,3,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{3}
}
func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *UpdateRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UpdateRequest) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UpdateRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type RemoveRequest struct {
	DatasetId            []byte   `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Id                   []byte   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRequest) Reset()         { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()    {}
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{4}
}
func (m *RemoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRequest.Merge(m, src)
}
func (m *RemoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRequest proto.InternalMessageInfo

func (m *RemoveRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *RemoveRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type BatchItem struct {
	Id                   []byte            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                []float32         `protobuf:"fixed32,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Level                int32             `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BatchItem) Reset()         { *m = BatchItem{} }
func (m *BatchItem) String() string { return proto.CompactTextString(m) }
func (*BatchItem) ProtoMessage()    {}
func (*BatchItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{5}
}
func (m *BatchItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchItem.Merge(m, src)
}
func (m *BatchItem) XXX_Size() int {
	return m.Size()
}
func (m *BatchItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchItem.DiscardUnknown(m)
}

var xxx_messageInfo_BatchItem proto.InternalMessageInfo

func (m *BatchItem) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BatchItem) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BatchItem) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *BatchItem) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type BatchRequest struct {
	DatasetId            []byte       `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Items                []*BatchItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BatchRequest) Reset()         { *m = BatchRequest{} }
func (m *BatchRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()    {}
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{6}
}
func (m *BatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest.Merge(m, src)
}
func (m *BatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest proto.InternalMessageInfo

func (m *BatchRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *BatchRequest) GetItems() []*BatchItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type PartitionBatchRequest struct {
	DatasetId            []byte       `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PartitionId          []byte       `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Items                []*BatchItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PartitionBatchRequest) Reset()         { *m = PartitionBatchRequest{} }
func (m *PartitionBatchRequest) String() string { return proto.CompactTextString(m) }
func (*PartitionBatchRequest) ProtoMessage()    {}
func (*PartitionBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{7}
}
func (m *PartitionBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionBatchRequest.Merge(m, src)
}
func (m *PartitionBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *PartitionBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionBatchRequest proto.InternalMessageInfo

func (m *PartitionBatchRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *PartitionBatchRequest) GetPartitionId() []byte {
	if m != nil {
		return m.PartitionId
	}
	return nil
}

func (m *PartitionBatchRequest) GetItems() []*BatchItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type BatchResponse struct {
	Errors               map[string]string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BatchResponse) Reset()         { *m = BatchResponse{} }
func (m *BatchResponse) String() string { return proto.CompactTextString(m) }
func (*BatchResponse) ProtoMessage()    {}
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{8}
}
func (m *BatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse.Merge(m, src)
}
func (m *BatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse proto.InternalMessageInfo

func (m *BatchResponse) GetErrors() map[string]string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type PartitionInfoRequest struct {
	DatasetId            []byte   `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PartitionId          []byte   `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionInfoRequest) Reset()         { *m = PartitionInfoRequest{} }
func (m *PartitionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*PartitionInfoRequest) ProtoMessage()    {}
func (*PartitionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{9}
}
func (m *PartitionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionInfoRequest.Merge(m, src)
}
func (m *PartitionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *PartitionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionInfoRequest proto.InternalMessageInfo

func (m *PartitionInfoRequest) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *PartitionInfoRequest) GetPartitionId() []byte {
	if m != nil {
		return m.PartitionId
	}
	return nil
}

type PartitionInfoResponse struct {
	Len                  uint64   `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	BytesSize            uint64   `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionInfoResponse) Reset()         { *m = PartitionInfoResponse{} }
func (m *PartitionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*PartitionInfoResponse) ProtoMessage()    {}
func (*PartitionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{10}
}
func (m *PartitionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionInfoResponse.Merge(m, src)
}
func (m *PartitionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *PartitionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionInfoResponse proto.InternalMessageInfo

func (m *PartitionInfoResponse) GetLen() uint64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *PartitionInfoResponse) GetBytesSize() uint64 {
	if m != nil {
		return m.BytesSize
	}
	return 0
}

type Dataset struct {
	Id                   []byte       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Dimension            uint32       `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Space                Space        `protobuf:"varint,3,opt,name=space,proto3,enum=datasetV1.Space" json:"space,omitempty"`
	PartitionCount       uint32       `protobuf:"varint,4,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	ReplicationFactor    uint32       `protobuf:"varint,5,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	Partitions           []*Partition `protobuf:"bytes,6,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Size_                uint64       `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Dataset) Reset()         { *m = Dataset{} }
func (m *Dataset) String() string { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()    {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{11}
}
func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(m, src)
}
func (m *Dataset) XXX_Size() int {
	return m.Size()
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

func (m *Dataset) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Dataset) GetDimension() uint32 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

func (m *Dataset) GetSpace() Space {
	if m != nil {
		return m.Space
	}
	return Space_Euclidean
}

func (m *Dataset) GetPartitionCount() uint32 {
	if m != nil {
		return m.PartitionCount
	}
	return 0
}

func (m *Dataset) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *Dataset) GetPartitions() []*Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *Dataset) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type DatasetSize struct {
	Len                  uint64   `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	BytesSize            uint64   `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasetSize) Reset()         { *m = DatasetSize{} }
func (m *DatasetSize) String() string { return proto.CompactTextString(m) }
func (*DatasetSize) ProtoMessage()    {}
func (*DatasetSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{12}
}
func (m *DatasetSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetSize.Merge(m, src)
}
func (m *DatasetSize) XXX_Size() int {
	return m.Size()
}
func (m *DatasetSize) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetSize.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetSize proto.InternalMessageInfo

func (m *DatasetSize) GetLen() uint64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *DatasetSize) GetBytesSize() uint64 {
	if m != nil {
		return m.BytesSize
	}
	return 0
}

type Partition struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeIds              []uint64 `protobuf:"varint,2,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Partition) Reset()         { *m = Partition{} }
func (m *Partition) String() string { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()    {}
func (*Partition) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{13}
}
func (m *Partition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Partition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Partition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Partition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partition.Merge(m, src)
}
func (m *Partition) XXX_Size() int {
	return m.Size()
}
func (m *Partition) XXX_DiscardUnknown() {
	xxx_messageInfo_Partition.DiscardUnknown(m)
}

var xxx_messageInfo_Partition proto.InternalMessageInfo

func (m *Partition) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Partition) GetNodeIds() []uint64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type DatasetManagerChange struct {
	Type                 DatasetManagerChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=datasetV1.DatasetManagerChangeType" json:"type,omitempty"`
	NotificationId       []byte                   `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	Data                 []byte                   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DatasetManagerChange) Reset()         { *m = DatasetManagerChange{} }
func (m *DatasetManagerChange) String() string { return proto.CompactTextString(m) }
func (*DatasetManagerChange) ProtoMessage()    {}
func (*DatasetManagerChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{14}
}
func (m *DatasetManagerChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetManagerChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetManagerChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetManagerChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetManagerChange.Merge(m, src)
}
func (m *DatasetManagerChange) XXX_Size() int {
	return m.Size()
}
func (m *DatasetManagerChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetManagerChange.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetManagerChange proto.InternalMessageInfo

func (m *DatasetManagerChange) GetType() DatasetManagerChangeType {
	if m != nil {
		return m.Type
	}
	return DatasetManagerChangeType_DatasetManagerCreateDataset
}

func (m *DatasetManagerChange) GetNotificationId() []byte {
	if m != nil {
		return m.NotificationId
	}
	return nil
}

func (m *DatasetManagerChange) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DatasetPartitionNodesChange struct {
	Type                 DatasetPartitionNodesChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=datasetV1.DatasetPartitionNodesChangeType" json:"type,omitempty"`
	DatasetId            []byte                          `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PartitionId          []byte                          `protobuf:"bytes,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	NodeId               uint64                          `protobuf:"varint,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DatasetPartitionNodesChange) Reset()         { *m = DatasetPartitionNodesChange{} }
func (m *DatasetPartitionNodesChange) String() string { return proto.CompactTextString(m) }
func (*DatasetPartitionNodesChange) ProtoMessage()    {}
func (*DatasetPartitionNodesChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{15}
}
func (m *DatasetPartitionNodesChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetPartitionNodesChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetPartitionNodesChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetPartitionNodesChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetPartitionNodesChange.Merge(m, src)
}
func (m *DatasetPartitionNodesChange) XXX_Size() int {
	return m.Size()
}
func (m *DatasetPartitionNodesChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetPartitionNodesChange.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetPartitionNodesChange proto.InternalMessageInfo

func (m *DatasetPartitionNodesChange) GetType() DatasetPartitionNodesChangeType {
	if m != nil {
		return m.Type
	}
	return DatasetPartitionNodesChangeType_DatasetPartitionNodesChangeAddNode
}

func (m *DatasetPartitionNodesChange) GetDatasetId() []byte {
	if m != nil {
		return m.DatasetId
	}
	return nil
}

func (m *DatasetPartitionNodesChange) GetPartitionId() []byte {
	if m != nil {
		return m.PartitionId
	}
	return nil
}

func (m *DatasetPartitionNodesChange) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

type PartitionChange struct {
	Type                 PartitionChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=datasetV1.PartitionChangeType" json:"type,omitempty"`
	NotificationId       []byte              `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	Id                   []byte              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Value                []float32           `protobuf:"fixed32,4,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata             map[string]string   `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Level                int32               `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	BatchItems           []*BatchItem        `protobuf:"bytes,7,rep,name=batch_items,json=batchItems,proto3" json:"batch_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PartitionChange) Reset()         { *m = PartitionChange{} }
func (m *PartitionChange) String() string { return proto.CompactTextString(m) }
func (*PartitionChange) ProtoMessage()    {}
func (*PartitionChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{16}
}
func (m *PartitionChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionChange.Merge(m, src)
}
func (m *PartitionChange) XXX_Size() int {
	return m.Size()
}
func (m *PartitionChange) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionChange.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionChange proto.InternalMessageInfo

func (m *PartitionChange) GetType() PartitionChangeType {
	if m != nil {
		return m.Type
	}
	return PartitionChangeType_PartitionChangeInsertValue
}

func (m *PartitionChange) GetNotificationId() []byte {
	if m != nil {
		return m.NotificationId
	}
	return nil
}

func (m *PartitionChange) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PartitionChange) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PartitionChange) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PartitionChange) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PartitionChange) GetBatchItems() []*BatchItem {
	if m != nil {
		return m.BatchItems
	}
	return nil
}

type DatasetManagerSnapshot struct {
	Datasets             []*Dataset `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DatasetManagerSnapshot) Reset()         { *m = DatasetManagerSnapshot{} }
func (m *DatasetManagerSnapshot) String() string { return proto.CompactTextString(m) }
func (*DatasetManagerSnapshot) ProtoMessage()    {}
func (*DatasetManagerSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f69247dc9b20935f, []int{17}
}
func (m *DatasetManagerSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetManagerSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetManagerSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetManagerSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetManagerSnapshot.Merge(m, src)
}
func (m *DatasetManagerSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *DatasetManagerSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetManagerSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetManagerSnapshot proto.InternalMessageInfo

func (m *DatasetManagerSnapshot) GetDatasets() []*Dataset {
	if m != nil {
		return m.Datasets
	}
	return nil
}

func init() {
	proto.RegisterEnum("datasetV1.Space", Space_name, Space_value)
	proto.RegisterEnum("datasetV1.DatasetManagerChangeType", DatasetManagerChangeType_name, DatasetManagerChangeType_value)
	proto.RegisterEnum("datasetV1.DatasetPartitionNodesChangeType", DatasetPartitionNodesChangeType_name, DatasetPartitionNodesChangeType_value)
	proto.RegisterEnum("datasetV1.PartitionChangeType", PartitionChangeType_name, PartitionChangeType_value)
	proto.RegisterType((*ListDatasetsRequest)(nil), "datasetV1.ListDatasetsRequest")
	proto.RegisterType((*GetDatasetRequest)(nil), "datasetV1.GetDatasetRequest")
	proto.RegisterType((*InsertRequest)(nil), "datasetV1.InsertRequest")
	proto.RegisterMapType((map[string]string)(nil), "datasetV1.InsertRequest.MetadataEntry")
	proto.RegisterType((*UpdateRequest)(nil), "datasetV1.UpdateRequest")
	proto.RegisterMapType((map[string]string)(nil), "datasetV1.UpdateRequest.MetadataEntry")
	proto.RegisterType((*RemoveRequest)(nil), "datasetV1.RemoveRequest")
	proto.RegisterType((*BatchItem)(nil), "datasetV1.BatchItem")
	proto.RegisterMapType((map[string]string)(nil), "datasetV1.BatchItem.MetadataEntry")
	proto.RegisterType((*BatchRequest)(nil), "datasetV1.BatchRequest")
	proto.RegisterType((*PartitionBatchRequest)(nil), "datasetV1.PartitionBatchRequest")
	proto.RegisterType((*BatchResponse)(nil), "datasetV1.BatchResponse")
	proto.RegisterMapType((map[string]string)(nil), "datasetV1.BatchResponse.ErrorsEntry")
	proto.RegisterType((*PartitionInfoRequest)(nil), "datasetV1.PartitionInfoRequest")
	proto.RegisterType((*PartitionInfoResponse)(nil), "datasetV1.PartitionInfoResponse")
	proto.RegisterType((*Dataset)(nil), "datasetV1.Dataset")
	proto.RegisterType((*DatasetSize)(nil), "datasetV1.DatasetSize")
	proto.RegisterType((*Partition)(nil), "datasetV1.Partition")
	proto.RegisterType((*DatasetManagerChange)(nil), "datasetV1.DatasetManagerChange")
	proto.RegisterType((*DatasetPartitionNodesChange)(nil), "datasetV1.DatasetPartitionNodesChange")
	proto.RegisterType((*PartitionChange)(nil), "datasetV1.PartitionChange")
	proto.RegisterMapType((map[string]string)(nil), "datasetV1.PartitionChange.MetadataEntry")
	proto.RegisterType((*DatasetManagerSnapshot)(nil), "datasetV1.DatasetManagerSnapshot")
}

func init() { proto.RegisterFile("dataset.proto", fileDescriptor_f69247dc9b20935f) }

var fileDescriptor_f69247dc9b20935f = []byte{
	// 1222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdd, 0x72, 0xdb, 0xc4,
	0x17, 0xcf, 0xca, 0x1f, 0x89, 0x8f, 0x63, 0xd7, 0xdd, 0xe6, 0xdf, 0xfa, 0xef, 0x16, 0xc7, 0xa8,
	0x50, 0x8c, 0x67, 0x6a, 0x37, 0x2e, 0xd0, 0x00, 0x9d, 0x4c, 0xc9, 0x47, 0x5b, 0xcf, 0x10, 0x60,
	0x14, 0xda, 0x01, 0x6e, 0x32, 0x8a, 0xb5, 0x89, 0x05, 0xb6, 0x64, 0xb4, 0x1b, 0x33, 0xee, 0x1d,
	0x33, 0x30, 0xc3, 0x05, 0x0f, 0xc0, 0x93, 0x30, 0x3c, 0x00, 0x17, 0x5c, 0xc2, 0x05, 0xf7, 0x4c,
	0xe8, 0x83, 0x30, 0xbb, 0x2b, 0xc9, 0xab, 0x48, 0x4a, 0x9a, 0xa4, 0x70, 0xa7, 0x3d, 0xdf, 0xe7,
	0xa7, 0x9f, 0xcf, 0x1e, 0x19, 0x4a, 0x96, 0xc9, 0x4c, 0x4a, 0x58, 0x7b, 0xec, 0xb9, 0xcc, 0xc5,
	0x05, 0xff, 0xf8, 0x74, 0xa5, 0x06, 0x7d, 0xd7, 0x23, 0x52, 0xac, 0x77, 0xe1, 0xca, 0x87, 0x36,
	0x65, 0x9b, 0x52, 0x49, 0x0d, 0xf2, 0xf5, 0x21, 0xa1, 0x0c, 0x5f, 0x87, 0xc2, 0x37, 0x36, 0x1b,
	0xec, 0x52, 0xfb, 0x19, 0xa9, 0xa2, 0x06, 0x6a, 0x2e, 0x18, 0x0b, 0x5c, 0xb0, 0x63, 0x3f, 0x23,
	0xfa, 0xc7, 0x70, 0xf9, 0x11, 0x09, 0x5c, 0x02, 0x8f, 0x57, 0x00, 0xfc, 0x0c, 0xbb, 0xb6, 0x25,
	0x5c, 0x16, 0x8d, 0x20, 0x67, 0xcf, 0x8a, 0x06, 0xd4, 0x8e, 0x05, 0xfc, 0x13, 0x41, 0xa9, 0xe7,
	0x50, 0xe2, 0xbd, 0x68, 0xb4, 0x32, 0x68, 0xb6, 0x25, 0xc2, 0x2c, 0x1a, 0x9a, 0x6d, 0xe1, 0x25,
	0xc8, 0x4d, 0xcc, 0xe1, 0x21, 0xa9, 0x66, 0x1a, 0x99, 0xa6, 0x66, 0xc8, 0x03, 0x5e, 0x87, 0x85,
	0x11, 0x61, 0x26, 0x77, 0xab, 0x66, 0x1b, 0x99, 0x66, 0xb1, 0x7b, 0xab, 0x1d, 0xa2, 0xd0, 0x8e,
	0x24, 0x6c, 0x6f, 0xfb, 0x86, 0x5b, 0x0e, 0xf3, 0xa6, 0x46, 0xe8, 0x57, 0x7b, 0x1f, 0x4a, 0x11,
	0x15, 0xae, 0x40, 0xe6, 0x2b, 0x32, 0x15, 0x25, 0x15, 0x0c, 0xfe, 0x38, 0x4b, 0xae, 0x09, 0x99,
	0x3c, 0xbc, 0xa7, 0xad, 0x22, 0xd1, 0xd7, 0x93, 0xb1, 0x65, 0x32, 0xf2, 0x1f, 0xf6, 0x15, 0x49,
	0xf8, 0xef, 0xf4, 0xb5, 0x06, 0x25, 0x83, 0x8c, 0xdc, 0xc9, 0x39, 0xdb, 0xd2, 0x7f, 0x45, 0x50,
	0x58, 0x37, 0x59, 0x7f, 0xd0, 0x63, 0x64, 0xe4, 0x6b, 0x51, 0xbc, 0x69, 0x4d, 0x6d, 0x7a, 0x4d,
	0x69, 0x3a, 0x23, 0x9a, 0xd6, 0x95, 0xa6, 0xc3, 0x68, 0x69, 0x0d, 0xf3, 0xa8, 0x43, 0x32, 0x21,
	0xc3, 0x6a, 0xb6, 0x81, 0x9a, 0x39, 0x43, 0x1e, 0x2e, 0x06, 0xc3, 0xe7, 0xb0, 0x28, 0xf2, 0xbe,
	0x20, 0x0a, 0x2d, 0xc8, 0xd9, 0x8c, 0x8c, 0xa8, 0xe8, 0xab, 0xd8, 0x5d, 0x4a, 0x2a, 0xdf, 0x90,
	0x26, 0xfa, 0xf7, 0x08, 0xfe, 0xf7, 0x89, 0xe9, 0x31, 0x9b, 0xd9, 0xae, 0x73, 0x96, 0x24, 0xaf,
	0xc2, 0xe2, 0x38, 0xf0, 0xdb, 0x0d, 0x41, 0x2f, 0x86, 0x32, 0xb5, 0x8e, 0xcc, 0xe9, 0x75, 0xfc,
	0x80, 0xa0, 0xe4, 0xa7, 0xa7, 0x63, 0xd7, 0xa1, 0x04, 0xdf, 0x87, 0x3c, 0xf1, 0x3c, 0xd7, 0xa3,
	0x55, 0x24, 0xdc, 0x5f, 0x3b, 0xee, 0x1e, 0x58, 0xb6, 0xb7, 0x84, 0x99, 0x7c, 0x0f, 0xbe, 0x4f,
	0xed, 0x5d, 0x28, 0x2a, 0xe2, 0x33, 0xa1, 0xfd, 0x19, 0x2c, 0x85, 0x88, 0xf4, 0x9c, 0x7d, 0xf7,
	0xa5, 0x01, 0xa2, 0x3f, 0x56, 0xb0, 0x96, 0x91, 0xfd, 0x5e, 0x2b, 0x90, 0x19, 0x12, 0x47, 0xc4,
	0xcc, 0x1a, 0xfc, 0x91, 0x27, 0xdb, 0x9b, 0x32, 0x42, 0x67, 0x73, 0x2c, 0x6b, 0x14, 0x84, 0x44,
	0x0c, 0xb2, 0x6f, 0x35, 0x98, 0xf7, 0xe7, 0x62, 0x8c, 0xd6, 0x37, 0xa0, 0x60, 0xd9, 0x23, 0xe2,
	0x50, 0xdb, 0x75, 0x84, 0x67, 0xc9, 0x98, 0x09, 0xf0, 0x2d, 0xc8, 0xd1, 0xb1, 0xd9, 0xe7, 0xbf,
	0x74, 0xd4, 0x2c, 0x77, 0x2b, 0x0a, 0xaa, 0x3b, 0x5c, 0x6e, 0x48, 0x35, 0x7e, 0x03, 0x2e, 0xcd,
	0xda, 0xe9, 0xbb, 0x87, 0x0e, 0x13, 0x84, 0x2e, 0x19, 0xe5, 0x50, 0xbc, 0xc1, 0xa5, 0xf8, 0x36,
	0x60, 0x8f, 0x8c, 0x87, 0x76, 0xdf, 0x14, 0xa6, 0xfb, 0x66, 0x9f, 0xb9, 0x5e, 0x35, 0x27, 0x6c,
	0x2f, 0x2b, 0x9a, 0x87, 0x42, 0x81, 0xdf, 0x02, 0x08, 0x03, 0xd0, 0x6a, 0x3e, 0xc6, 0x8c, 0x10,
	0x20, 0x43, 0xb1, 0xc3, 0x18, 0xb2, 0x02, 0x88, 0x79, 0x01, 0x84, 0x78, 0xd6, 0xd7, 0xa0, 0xe8,
	0x43, 0xc0, 0x21, 0x39, 0x3b, 0x86, 0xef, 0x40, 0x21, 0x4c, 0x16, 0x03, 0xf1, 0xff, 0xb0, 0xe0,
	0xb8, 0x16, 0xd9, 0xb5, 0x2d, 0xf9, 0x33, 0xca, 0x1a, 0xf3, 0xfc, 0xdc, 0xb3, 0xa8, 0xfe, 0x23,
	0x82, 0x25, 0x3f, 0xf1, 0xb6, 0xe9, 0x98, 0x07, 0xc4, 0xdb, 0x18, 0x98, 0xce, 0x01, 0xc1, 0xf7,
	0x20, 0xcb, 0xa6, 0x63, 0x79, 0x8d, 0x95, 0xbb, 0x37, 0x95, 0xa6, 0x92, 0xcc, 0x3f, 0x9d, 0x8e,
	0x89, 0x21, 0x1c, 0x38, 0xd6, 0x8e, 0xcb, 0xec, 0xfd, 0x00, 0xc3, 0x90, 0x3d, 0x65, 0x55, 0xdc,
	0xb3, 0x38, 0x0c, 0xfe, 0x5c, 0xe2, 0x5a, 0xf1, 0xac, 0xff, 0x82, 0xe0, 0xba, 0x1f, 0x3f, 0x6c,
	0xe7, 0x23, 0xd7, 0x22, 0xd4, 0xaf, 0x6a, 0x2d, 0x52, 0x55, 0x2b, 0x5e, 0x55, 0x92, 0x97, 0x52,
	0x5c, 0x94, 0xf6, 0xda, 0x69, 0xb4, 0xcf, 0xc4, 0xe7, 0xc0, 0x35, 0x98, 0xf7, 0xb1, 0x14, 0x14,
	0xca, 0x1a, 0x79, 0x09, 0xa5, 0xfe, 0x5c, 0x83, 0x4b, 0x61, 0x76, 0xbf, 0xdc, 0x6e, 0xa4, 0xdc,
	0x7a, 0x12, 0x33, 0xce, 0x8f, 0x9f, 0x7c, 0xcb, 0x99, 0xf8, 0x0d, 0x90, 0x55, 0x6f, 0x80, 0x4d,
	0xe5, 0x06, 0xc8, 0x09, 0x82, 0x36, 0xd3, 0xcb, 0x38, 0xfd, 0x1e, 0xc8, 0x2b, 0xf7, 0x00, 0x7e,
	0x1b, 0x8a, 0x7b, 0x7c, 0x78, 0xed, 0xca, 0xc9, 0x38, 0x7f, 0xc2, 0x64, 0x84, 0xbd, 0xe0, 0x91,
	0x5e, 0xec, 0xfa, 0x78, 0x0c, 0x57, 0xa3, 0x04, 0xdc, 0x71, 0xcc, 0x31, 0x1d, 0xb8, 0x0c, 0xb7,
	0x61, 0xc1, 0xcf, 0x1c, 0x4c, 0x59, 0x1c, 0xe7, 0x87, 0x11, 0xda, 0xb4, 0x56, 0x20, 0x27, 0x86,
	0x04, 0x2e, 0x41, 0x61, 0xeb, 0xb0, 0x3f, 0xb4, 0x2d, 0x62, 0x3a, 0x95, 0x39, 0x7e, 0xdc, 0x36,
	0x9d, 0x81, 0xc9, 0x98, 0xe9, 0x54, 0x10, 0x06, 0xc8, 0x6f, 0xb8, 0xd4, 0x76, 0x48, 0x45, 0x6b,
	0x7d, 0x87, 0xa0, 0x9a, 0x46, 0x7f, 0xbc, 0x1c, 0x52, 0x37, 0xd0, 0x79, 0xc4, 0x64, 0xc4, 0x97,
	0x55, 0xe6, 0xe2, 0x06, 0x9b, 0x64, 0x48, 0x66, 0x06, 0x08, 0xdf, 0x02, 0x3d, 0x6a, 0x20, 0xb7,
	0x92, 0x28, 0xa7, 0x2b, 0x5a, 0x8b, 0xc1, 0xf2, 0x29, 0x74, 0x57, 0x42, 0x25, 0x99, 0x7c, 0x60,
	0x59, 0xfc, 0x54, 0x99, 0xc3, 0x6f, 0xc2, 0xeb, 0x27, 0xd8, 0xc9, 0x7d, 0x45, 0x98, 0xa2, 0xd6,
	0x73, 0x04, 0x57, 0x12, 0x68, 0x8b, 0xeb, 0x50, 0x3b, 0x26, 0x96, 0x4b, 0xe2, 0x53, 0xfe, 0xce,
	0x2a, 0x73, 0x09, 0x7a, 0xd9, 0x96, 0xd4, 0xa3, 0x04, 0xbd, 0xc4, 0x45, 0xea, 0x35, 0x7c, 0x13,
	0x96, 0x8f, 0xe9, 0x25, 0xad, 0x94, 0x24, 0x99, 0x34, 0x23, 0x35, 0x53, 0x36, 0xcd, 0x48, 0x4d,
	0x97, 0xeb, 0xfe, 0xac, 0x41, 0x39, 0xfa, 0x16, 0xf0, 0x7d, 0xc8, 0xf2, 0x75, 0x1f, 0xab, 0x3f,
	0xe0, 0x84, 0xfd, 0xbf, 0x96, 0xc0, 0xb7, 0x3b, 0x08, 0xdf, 0x83, 0xcc, 0x23, 0xc2, 0xf0, 0x0d,
	0x45, 0x19, 0xfb, 0x10, 0x48, 0x72, 0xc5, 0x77, 0x20, 0x2f, 0x29, 0x84, 0x13, 0xb4, 0x89, 0x1e,
	0x77, 0x21, 0x2f, 0x9b, 0xc1, 0x57, 0xda, 0xfc, 0x73, 0x85, 0x2f, 0xb6, 0x4f, 0x7a, 0x9b, 0x41,
	0x92, 0xa5, 0x40, 0xb8, 0x35, 0x1a, 0xb3, 0xe9, 0x36, 0xa1, 0xd4, 0x3c, 0x20, 0xf8, 0x21, 0x94,
	0x67, 0xf5, 0x88, 0xdb, 0xe7, 0xe4, 0x52, 0xaf, 0xc6, 0x13, 0x73, 0xaf, 0xee, 0x1f, 0x39, 0x79,
	0x87, 0x05, 0xa8, 0xad, 0x42, 0x5e, 0xbe, 0x23, 0x5c, 0x4d, 0xfb, 0x80, 0x48, 0xa9, 0x68, 0x15,
	0xf2, 0xf2, 0xc5, 0x45, 0x3c, 0x23, 0x2b, 0x7a, 0xba, 0xa7, 0xe4, 0x6c, 0xc4, 0x33, 0xb2, 0x76,
	0xa7, 0x78, 0x3e, 0x80, 0xa2, 0x42, 0x2b, 0x7c, 0x2d, 0xbe, 0xa0, 0x49, 0xef, 0x6a, 0xda, 0xe6,
	0x16, 0x46, 0xf0, 0x4b, 0xbf, 0x40, 0x04, 0xbf, 0x85, 0x73, 0x44, 0x30, 0x94, 0x75, 0x4f, 0x6d,
	0xa7, 0x91, 0x34, 0xf3, 0xcf, 0x1b, 0xd3, 0x6f, 0xf0, 0xa5, 0xc6, 0xf4, 0x5b, 0xbe, 0x58, 0xcc,
	0x52, 0x64, 0x21, 0xc5, 0xcb, 0x49, 0xc1, 0x94, 0x25, 0xb8, 0xd6, 0x48, 0x37, 0x90, 0x31, 0xd7,
	0x1f, 0xfc, 0x76, 0x54, 0x47, 0xbf, 0x1f, 0xd5, 0xd1, 0x5f, 0x47, 0x75, 0xf4, 0xd3, 0xdf, 0xf5,
	0xb9, 0x2f, 0xda, 0x07, 0x36, 0x1b, 0x1c, 0xee, 0xb5, 0xfb, 0xee, 0xa8, 0x43, 0xbf, 0x9c, 0xde,
	0xb6, 0x26, 0x9d, 0x09, 0x19, 0xb9, 0x6e, 0x47, 0xfc, 0x33, 0xd0, 0x39, 0x20, 0x4e, 0x67, 0xb2,
	0xd2, 0x09, 0xe3, 0xee, 0xe5, 0x85, 0xfc, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x98, 0xe7,
	0x4f, 0x9d, 0x59, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatasetManagerClient is the client API for DatasetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetManagerClient interface {
	List(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (DatasetManager_ListClient, error)
	Get(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	Create(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error)
	Delete(ctx context.Context, in *coreV1.UUIDRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error)
	GetDatasetSize(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*DatasetSize, error)
}

type datasetManagerClient struct {
	cc *grpc.ClientConn
}

func NewDatasetManagerClient(cc *grpc.ClientConn) DatasetManagerClient {
	return &datasetManagerClient{cc}
}

func (c *datasetManagerClient) List(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (DatasetManager_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatasetManager_serviceDesc.Streams[0], "/datasetV1.DatasetManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasetManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatasetManager_ListClient interface {
	Recv() (*Dataset, error)
	grpc.ClientStream
}

type datasetManagerListClient struct {
	grpc.ClientStream
}

func (x *datasetManagerListClient) Recv() (*Dataset, error) {
	m := new(Dataset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datasetManagerClient) Get(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/datasetV1.DatasetManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetManagerClient) Create(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/datasetV1.DatasetManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetManagerClient) Delete(ctx context.Context, in *coreV1.UUIDRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error) {
	out := new(coreV1.EmptyMessage)
	err := c.cc.Invoke(ctx, "/datasetV1.DatasetManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetManagerClient) GetDatasetSize(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*DatasetSize, error) {
	out := new(DatasetSize)
	err := c.cc.Invoke(ctx, "/datasetV1.DatasetManager/GetDatasetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetManagerServer is the server API for DatasetManager service.
type DatasetManagerServer interface {
	List(*ListDatasetsRequest, DatasetManager_ListServer) error
	Get(context.Context, *GetDatasetRequest) (*Dataset, error)
	Create(context.Context, *Dataset) (*Dataset, error)
	Delete(context.Context, *coreV1.UUIDRequest) (*coreV1.EmptyMessage, error)
	GetDatasetSize(context.Context, *GetDatasetRequest) (*DatasetSize, error)
}

// UnimplementedDatasetManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetManagerServer struct {
}

func (*UnimplementedDatasetManagerServer) List(req *ListDatasetsRequest, srv DatasetManager_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDatasetManagerServer) Get(ctx context.Context, req *GetDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDatasetManagerServer) Create(ctx context.Context, req *Dataset) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDatasetManagerServer) Delete(ctx context.Context, req *coreV1.UUIDRequest) (*coreV1.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDatasetManagerServer) GetDatasetSize(ctx context.Context, req *GetDatasetRequest) (*DatasetSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetSize not implemented")
}

func RegisterDatasetManagerServer(s *grpc.Server, srv DatasetManagerServer) {
	s.RegisterService(&_DatasetManager_serviceDesc, srv)
}

func _DatasetManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatasetManagerServer).List(m, &datasetManagerListServer{stream})
}

type DatasetManager_ListServer interface {
	Send(*Dataset) error
	grpc.ServerStream
}

type datasetManagerListServer struct {
	grpc.ServerStream
}

func (x *datasetManagerListServer) Send(m *Dataset) error {
	return x.ServerStream.SendMsg(m)
}

func _DatasetManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DatasetManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).Get(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DatasetManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).Create(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(coreV1.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DatasetManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).Delete(ctx, req.(*coreV1.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetManager_GetDatasetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).GetDatasetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DatasetManager/GetDatasetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).GetDatasetSize(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datasetV1.DatasetManager",
	HandlerType: (*DatasetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DatasetManager_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DatasetManager_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DatasetManager_Delete_Handler,
		},
		{
			MethodName: "GetDatasetSize",
			Handler:    _DatasetManager_GetDatasetSize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _DatasetManager_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataset.proto",
}

// DataManagerClient is the client API for DataManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataManagerClient interface {
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error)
	BatchInsert(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	BatchUpdate(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	BatchRemove(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionBatchInsert(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionBatchUpdate(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionBatchRemove(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionInfo(ctx context.Context, in *PartitionInfoRequest, opts ...grpc.CallOption) (*PartitionInfoResponse, error)
}

type dataManagerClient struct {
	cc *grpc.ClientConn
}

func NewDataManagerClient(cc *grpc.ClientConn) DataManagerClient {
	return &dataManagerClient{cc}
}

func (c *dataManagerClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error) {
	out := new(coreV1.EmptyMessage)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error) {
	out := new(coreV1.EmptyMessage)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*coreV1.EmptyMessage, error) {
	out := new(coreV1.EmptyMessage)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) BatchInsert(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/BatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) BatchUpdate(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/BatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) BatchRemove(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/BatchRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionBatchInsert(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/PartitionBatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionBatchUpdate(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/PartitionBatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionBatchRemove(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/PartitionBatchRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionInfo(ctx context.Context, in *PartitionInfoRequest, opts ...grpc.CallOption) (*PartitionInfoResponse, error) {
	out := new(PartitionInfoResponse)
	err := c.cc.Invoke(ctx, "/datasetV1.DataManager/PartitionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManagerServer is the server API for DataManager service.
type DataManagerServer interface {
	Insert(context.Context, *InsertRequest) (*coreV1.EmptyMessage, error)
	Update(context.Context, *UpdateRequest) (*coreV1.EmptyMessage, error)
	Remove(context.Context, *RemoveRequest) (*coreV1.EmptyMessage, error)
	BatchInsert(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchUpdate(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchRemove(context.Context, *BatchRequest) (*BatchResponse, error)
	PartitionBatchInsert(context.Context, *PartitionBatchRequest) (*BatchResponse, error)
	PartitionBatchUpdate(context.Context, *PartitionBatchRequest) (*BatchResponse, error)
	PartitionBatchRemove(context.Context, *PartitionBatchRequest) (*BatchResponse, error)
	PartitionInfo(context.Context, *PartitionInfoRequest) (*PartitionInfoResponse, error)
}

// UnimplementedDataManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDataManagerServer struct {
}

func (*UnimplementedDataManagerServer) Insert(ctx context.Context, req *InsertRequest) (*coreV1.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedDataManagerServer) Update(ctx context.Context, req *UpdateRequest) (*coreV1.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDataManagerServer) Remove(ctx context.Context, req *RemoveRequest) (*coreV1.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedDataManagerServer) BatchInsert(ctx context.Context, req *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (*UnimplementedDataManagerServer) BatchUpdate(ctx context.Context, req *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdate not implemented")
}
func (*UnimplementedDataManagerServer) BatchRemove(ctx context.Context, req *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRemove not implemented")
}
func (*UnimplementedDataManagerServer) PartitionBatchInsert(ctx context.Context, req *PartitionBatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBatchInsert not implemented")
}
func (*UnimplementedDataManagerServer) PartitionBatchUpdate(ctx context.Context, req *PartitionBatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBatchUpdate not implemented")
}
func (*UnimplementedDataManagerServer) PartitionBatchRemove(ctx context.Context, req *PartitionBatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBatchRemove not implemented")
}
func (*UnimplementedDataManagerServer) PartitionInfo(ctx context.Context, req *PartitionInfoRequest) (*PartitionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionInfo not implemented")
}

func RegisterDataManagerServer(s *grpc.Server, srv DataManagerServer) {
	s.RegisterService(&_DataManager_serviceDesc, srv)
}

func _DataManager_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/BatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).BatchInsert(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_BatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).BatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/BatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).BatchUpdate(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_BatchRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).BatchRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/BatchRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).BatchRemove(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionBatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionBatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/PartitionBatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionBatchInsert(ctx, req.(*PartitionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionBatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionBatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/PartitionBatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionBatchUpdate(ctx, req.(*PartitionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionBatchRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionBatchRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/PartitionBatchRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionBatchRemove(ctx, req.(*PartitionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasetV1.DataManager/PartitionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionInfo(ctx, req.(*PartitionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datasetV1.DataManager",
	HandlerType: (*DataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _DataManager_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DataManager_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DataManager_Remove_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _DataManager_BatchInsert_Handler,
		},
		{
			MethodName: "BatchUpdate",
			Handler:    _DataManager_BatchUpdate_Handler,
		},
		{
			MethodName: "BatchRemove",
			Handler:    _DataManager_BatchRemove_Handler,
		},
		{
			MethodName: "PartitionBatchInsert",
			Handler:    _DataManager_PartitionBatchInsert_Handler,
		},
		{
			MethodName: "PartitionBatchUpdate",
			Handler:    _DataManager_PartitionBatchUpdate_Handler,
		},
		{
			MethodName: "PartitionBatchRemove",
			Handler:    _DataManager_PartitionBatchRemove_Handler,
		},
		{
			MethodName: "PartitionInfo",
			Handler:    _DataManager_PartitionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataset.proto",
}

func (m *ListDatasetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDatasetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDatasetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WithSize {
		i--
		if m.WithSize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDatasetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WithSize {
		i--
		if m.WithSize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDataset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDataset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDataset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.Value[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
		}
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Value)*4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDataset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDataset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDataset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float32bits(float32(m.Value[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
		}
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Value)*4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDataset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDataset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDataset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			f3 := math.Float32bits(float32(m.Value[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f3))
		}
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Value)*4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartitionBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PartitionId) > 0 {
		i -= len(m.PartitionId)
		copy(dAtA[i:], m.PartitionId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.PartitionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Errors) > 0 {
		for k := range m.Errors {
			v := m.Errors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDataset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDataset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDataset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartitionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PartitionId) > 0 {
		i -= len(m.PartitionId)
		copy(dAtA[i:], m.PartitionId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.PartitionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartitionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BytesSize != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.BytesSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Len != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dataset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dataset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x28
	}
	if m.PartitionCount != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.PartitionCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Space != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Space))
		i--
		dAtA[i] = 0x18
	}
	if m.Dimension != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Dimension))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatasetSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BytesSize != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.BytesSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Len != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Partition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Partition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeIds) > 0 {
		dAtA5 := make([]byte, len(m.NodeIds)*10)
		var j4 int
		for _, num := range m.NodeIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintDataset(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatasetManagerChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetManagerChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetManagerChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NotificationId) > 0 {
		i -= len(m.NotificationId)
		copy(dAtA[i:], m.NotificationId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.NotificationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DatasetPartitionNodesChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetPartitionNodesChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetPartitionNodesChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeId != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PartitionId) > 0 {
		i -= len(m.PartitionId)
		copy(dAtA[i:], m.PartitionId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.PartitionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DatasetId) > 0 {
		i -= len(m.DatasetId)
		copy(dAtA[i:], m.DatasetId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartitionChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BatchItems) > 0 {
		for iNdEx := len(m.BatchItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Level != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDataset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDataset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDataset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			f6 := math.Float32bits(float32(m.Value[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f6))
		}
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Value)*4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NotificationId) > 0 {
		i -= len(m.NotificationId)
		copy(dAtA[i:], m.NotificationId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.NotificationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DatasetManagerSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetManagerSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetManagerSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datasets) > 0 {
		for iNdEx := len(m.Datasets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datasets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataset(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListDatasetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithSize {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDatasetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.WithSize {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Value) > 0 {
		n += 1 + sovDataset(uint64(len(m.Value)*4)) + len(m.Value)*4
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataset(uint64(len(k))) + 1 + len(v) + sovDataset(uint64(len(v)))
			n += mapEntrySize + 1 + sovDataset(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Value) > 0 {
		n += 1 + sovDataset(uint64(len(m.Value)*4)) + len(m.Value)*4
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataset(uint64(len(k))) + 1 + len(v) + sovDataset(uint64(len(v)))
			n += mapEntrySize + 1 + sovDataset(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Value) > 0 {
		n += 1 + sovDataset(uint64(len(m.Value)*4)) + len(m.Value)*4
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataset(uint64(len(k))) + 1 + len(v) + sovDataset(uint64(len(v)))
			n += mapEntrySize + 1 + sovDataset(uint64(mapEntrySize))
		}
	}
	if m.Level != 0 {
		n += 1 + sovDataset(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.PartitionId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for k, v := range m.Errors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataset(uint64(len(k))) + 1 + len(v) + sovDataset(uint64(len(v)))
			n += mapEntrySize + 1 + sovDataset(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.PartitionId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Len != 0 {
		n += 1 + sovDataset(uint64(m.Len))
	}
	if m.BytesSize != 0 {
		n += 1 + sovDataset(uint64(m.BytesSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dataset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.Dimension != 0 {
		n += 1 + sovDataset(uint64(m.Dimension))
	}
	if m.Space != 0 {
		n += 1 + sovDataset(uint64(m.Space))
	}
	if m.PartitionCount != 0 {
		n += 1 + sovDataset(uint64(m.PartitionCount))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovDataset(uint64(m.ReplicationFactor))
	}
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	if m.Size_ != 0 {
		n += 1 + sovDataset(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatasetSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Len != 0 {
		n += 1 + sovDataset(uint64(m.Len))
	}
	if m.BytesSize != 0 {
		n += 1 + sovDataset(uint64(m.BytesSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Partition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.NodeIds) > 0 {
		l = 0
		for _, e := range m.NodeIds {
			l += sovDataset(uint64(e))
		}
		n += 1 + sovDataset(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatasetManagerChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDataset(uint64(m.Type))
	}
	l = len(m.NotificationId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatasetPartitionNodesChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDataset(uint64(m.Type))
	}
	l = len(m.DatasetId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.PartitionId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovDataset(uint64(m.NodeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDataset(uint64(m.Type))
	}
	l = len(m.NotificationId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Value) > 0 {
		n += 1 + sovDataset(uint64(len(m.Value)*4)) + len(m.Value)*4
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDataset(uint64(len(k))) + 1 + len(v) + sovDataset(uint64(len(v)))
			n += mapEntrySize + 1 + sovDataset(uint64(mapEntrySize))
		}
	}
	if m.Level != 0 {
		n += 1 + sovDataset(uint64(m.Level))
	}
	if len(m.BatchItems) > 0 {
		for _, e := range m.BatchItems {
			l = e.Size()
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatasetManagerSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datasets) > 0 {
		for _, e := range m.Datasets {
			l = e.Size()
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataset(x uint64) (n int) {
	return sovDataset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListDatasetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDatasetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDatasetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSize = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSize = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDataset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDataset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDataset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDataset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDataset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDataset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDataset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDataset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDataset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BatchItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionId = append(m.PartitionId[:0], dAtA[iNdEx:postIndex]...)
			if m.PartitionId == nil {
				m.PartitionId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BatchItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errors == nil {
				m.Errors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDataset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDataset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Errors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionId = append(m.PartitionId[:0], dAtA[iNdEx:postIndex]...)
			if m.PartitionId == nil {
				m.PartitionId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSize", wireType)
			}
			m.BytesSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dataset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dataset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			m.Dimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dimension |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= Space(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionCount", wireType)
			}
			m.PartitionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, &Partition{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSize", wireType)
			}
			m.BytesSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeIds = append(m.NodeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDataset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NodeIds) == 0 {
					m.NodeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeIds = append(m.NodeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetManagerChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetManagerChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetManagerChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DatasetManagerChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationId = append(m.NotificationId[:0], dAtA[iNdEx:postIndex]...)
			if m.NotificationId == nil {
				m.NotificationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetPartitionNodesChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetPartitionNodesChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetPartitionNodesChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DatasetPartitionNodesChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetId = append(m.DatasetId[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasetId == nil {
				m.DatasetId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionId = append(m.PartitionId[:0], dAtA[iNdEx:postIndex]...)
			if m.PartitionId == nil {
				m.PartitionId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PartitionChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationId = append(m.NotificationId[:0], dAtA[iNdEx:postIndex]...)
			if m.NotificationId == nil {
				m.NotificationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataset
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDataset
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDataset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDataset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDataset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchItems = append(m.BatchItems, &BatchItem{})
			if err := m.BatchItems[len(m.BatchItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetManagerSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetManagerSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetManagerSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datasets = append(m.Datasets, &Dataset{})
			if err := m.Datasets[len(m.Datasets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataset = fmt.Errorf("proto: unexpected end of group")
)
